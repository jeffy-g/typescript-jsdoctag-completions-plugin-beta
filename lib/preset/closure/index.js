module.exports=(()=>{var e={231:(e,a,o)=>{const i=o(779),n=o(597),t=["abstract","const","constructor","define","deprecated","dict","enum","export","extends","externs","fileoverview","final","implements","implicitCast","inheritDoc","interface:record","lends","license:preserve","noalias","nocollapse","nocompile","noinline","nosideeffects:modifies","override","package","param","polymer","polymerBehavior","private","protected","public","return","struct","suppress","template","this","throws","type","typedef","unrestricted"],r=[],s={const:"const-const-type",enum:"enum-type",throws:"throws-type",extends:"extends-type",implements:"implements-type",interface:"interface-record",record:"interface-record",lends:"lends-objectname",param:"param-type-varname-description",return:"return-type-description",template:"template-t",this:"this-type",fileoverview:"fileoverview-description",license:"license-preserve-description",preserve:"license-preserve-description",nosideeffects:"nosideeffects-modifies-thisarguments",modifies:"nosideeffects-modifies-thisarguments",type:"type-type",typedef:"typedef-type",define:"define-type-description",export:"export-export-sometype",deprecated:"deprecated-description",suppress:"suppress-warninggroup1warninggroup2",constructor:void 0},l={marker:"\nabstract|noinline|\nconstructor|dict|implicitCast|nosideeffects|\nin(?:terface|heritDoc)|externs|\noverride|final|struct|\np(?:ackage|r(?:ivate|otected)|ublic)|record|\npolymer(?:Behavior)|unrestricted|\nnoalias|nocompile|nocollapse\n",simple:"deprecated|license|preserve|fileoverview",complexity:"param|return|type(?:def)?|this|extends|implements|template|throws|export|const|define|enum|suppress|lends|modifies",provideTagData:e=>e?t:r,getExtraInfo(e){const a="https://github.com/google/closure-compiler/wiki";let o;if("abstract"===e)o=a+"/@abstract-classes-and-methods";else{o=`${a}/Annotating-JavaScript-for-the-Closure-Compiler#${s[e]||e}`}return`More info - Closure Compiler wiki [${e}](${o})`}};e.exports=n(l,i,{block:{const:"@const [{<type>}]",define:"@define {<type>} <description>",deprecated:"@deprecated <description>",fileoverview:"@fileoverview <description>",enum:"@enum {<type>}",extends:"@extends {<type>}",export:"@export [{SomeType}]",implements:"@implements {<type>}",lends:"@lends {objectName}",license:"@license [<description>]",modifies:"@modifies {this|arguments}",return:"@return {<type>} <description>",param:"@param [{<type>}] <name> <description>",this:"@this {<type>}",type:"@type {<type>}",typedef:"@typedef {<type>}",throws:"@throws {<type>}",suppress:"@suppress {warningGroup1,warningGroup2}"},inline:{}})},779:e=>{e.exports={en:{blockDocs:{constructor:"Marks a function as a constructor.  The compiler requires a @constructor annotation for any function that is used with the new keyword.  @constructor should be omitted from EcmaScript class constructor methods and goog.defineClass constructor methods.",enum:"Specifies an enum, which is a type with a specific finite number of possible values, often strings or numbers. @enum tag must be followed by a type expression.  If the type of an enum is omitted, number is assumed.",extends:"Marks a class or interface as inheriting from another class. A class marked with @extends must also be marked with either @constructor, @interface, or @record.",implements:"Used with @constructor to indicate that a class implements an interface.",interface:"Marks a function as an interface. An interface specifies the required members of a type. Any class that implements an interface must implement all of the methods and properties defined on the interface's prototype. See @implements.",lends:"Indicates that the keys of an object literal should be treated as properties of some other object. This annotation should only appear on object literals.",param:"Used with method, function and constructor definitions to specify the types of function arguments.",return:"Specifies the return types of method and function definitions. The @return tag must be followed by a type expression.",template:"See Generic Types.",this:"Specifies the type of the object to which the keyword this refers within a function. The @this tag must be followed by a type expression.",type:"Identifies the type of a variable, property, or expression. The @type tag must be followed by a type expression. You can also write the type annotation inline and omit @type, as in the second example.",typedef:"Complex types (including unions, and record types) can be aliased for convenience and maintainability using a typedef. These annotations can be long, but can be split over multiple lines for readability.",deprecated:"Warns against using the marked function, method, or property should not be used. Using a deprecated method produces a compiler warning.",final:"On a class, indicates that this class is not allowed to be extended. On a method, indicates that no subclass is allowed to override that method.",package:"Marks a member or property as package private. Only code in the same directory can access names marked @package. In particular, code in parent and child directories cannot access names marked @package.",public:"Indicates that a member or property is public. A property marked @public is accessible to all code in the any file.  This is the implicit default and rarely used.  This is not used to indicate that name should be preserved in obfuscating builds see @export.",private:"Marks a member as private. Only code in the same file can access global variables and functions marked @private. Constructors marked @private can only be instantiated by code in the same file and by their static and instance members.",protected:"Indicates that a member or property is protected. A property marked @protected is accessible to:",const:"Marks a variable as read-only. The compiler can inline @const variables, which optimizes the JavaScript code.",dict:"@dict is used to create objects with a variable number of properties. When a constructor (Foo in the example) is annotated with @dict, you can only use the bracket notation to access the properties of Foo objects. The annotation can also be used directly on object literals.",implicitCast:"This annotation can only appear in externs property declarations. The property has a declared type, but you can assign any type to it without a warning. When accessing the property, you get back a value of the declared type. For example, element.innerHTML can be assigned any type, but will always return a string.",inheritDoc:"Indicates that a method or property of a subclass intentionally hides a method or property of the superclass, and has exactly the same documentation. Note that the @inheritDoc tag implies the @override tag, @override is preferred.",override:"Indicates that a method or property is part of an interface implemented by the class or it intentionally hides a method or property of the superclass. If no other annotations are included, the method or property automatically inherits annotations from its superclass.",polymer:"Indicates that a class has Polymer semantics. Only affects the compiler when the --polymer_pass=2 flag is specified. Allows the Polymer Pass to recognize Polymer classes and add appropriate type information.",polymerBehavior:"Indicates that a global object is usable as a Polymer behavior. Allows the Polymer Pass to recognize behaviors and copy type information over to the using Polymer definition. Behavior objects must be global.",struct:"@struct is used to create objects with a fixed number of properties. When a constructor (Foo in the example) is annotated with @struct, you can only use the dot notation to access the properties of Foo objects, not the bracket notation. Also, you cannot add a property to a Foo instance after it's constructed. The annotation can also be used directly on object literals.",suppress:"Suppresses warnings. Warning categories are separated by | or ,. For a list of warning names, take a look at Warnings.",unrestricted:"Indicates that a class is neither a @struct type nor a @dict type. This is the default for old Closure-style classes created with a @constructor function. Both goog.defineClass and the ES class keyword produce classes which are @struct by default, so will need to be explicitly labeled @unrestricted.",define:"Indicates a constant that can be overridden by the compiler at compile-time. With the example on the left, you can pass the flag --define='ENABLE_DEBUG=false' to the compiler to change the value of ENABLE_DEBUG to false. The type of a defined constant can be number, string or boolean. Defines are only allowed in the global scope.",export:"When properties are marked with @export and the compiler is run with the --generate_exports flag, a corresponding goog.exportSymbol statement will be generated:",externs:"Declares an externs file.",fileoverview:"Makes the comment block provide file level information including suppressions.",license:"Tells the compiler to insert the associated comment before the compiled code for the marked file. This annotation allows important notices (such as legal licenses or copyright text) to survive compilation unchanged. Line breaks are preserved.",noalias:'Used in an externs file to indicate to the compiler that the variable or function should not be aliased as part of the \\"alias externals\\" pass of the compiler, is not enabled by default and only available through the Java API.',nocompile:"Used at the top of a file to tell the compiler to parse this file but not compile it. Code that is not meant for compilation and should be omitted from compilation tests (such as bootstrap code) uses this annotation. Most code should use other means such as a @define to change behavior.",nocollapse:"Denotes a property that should not be collapsed by the compiler into a variable. The primary use for @nocollapse is to allow exporting of mutable properties. Note that non-collapsed properties can still be renamed by the compiler. If you annotate a property that is an object with @nocollapse, all its properties will also remain uncollapsed.",noinline:"(EXPERIMENTAL) Denotes a function or variable that should not be inlined by the optimizations.",nosideeffects:'@nosideeffects indicates that a call to the declared function has no side effects. This annotation allows the compiler to remove calls to the function if the return value is not used.  This is not a signal that the function is \\"pure\\": it may still read mutable global state.',throws:"Used to document the exceptions thrown by a function. The type checker does not currently use this information. It is only used to figure out if a function declared in an externs file has side effects.",abstract:"Supporting the @abstract JsDoc and using that to aid compile-time checks on the semantics of abstract classes and methods was a feature request to Closure Compiler for a long time. This feature is also present in some other JavaScript optional type systems, such as TypeScript.  Closure Compiler added support for @abstract on classes and methods at the type system level in 2016. For new JavaScript code, the @abstract JsDoc should be used in favor of goog.abstractMethod."},inlineDocs:{}},cs:{blockDocs:{constructor:"Označí funkci jako konstruktor. Kompilátor vyžaduje @constructor anotaci pro jakoukoli funkci, která se používá s novým klíčovým slovem. @constructor by měl být vynechán z metod konstruktorů třídy EcmaScript a metod konstruktoru goog.defineClass.",enum:"Určuje výčet, což je typ se specifickým konečným počtem možných hodnot, často řetězců nebo čísel. Za značkou @enum musí následovat výraz typu. Pokud je typ výčtu vynechán, předpokládá se číslo.",extends:"Označí třídu nebo rozhraní jako zděděné z jiné třídy. Třída označená pomocí @extends musí být také označena buď @constructor, @interface, nebo @record.",implements:"Používá se s @constructor k označení, že třída implementuje rozhraní.",interface:"Označí funkci jako rozhraní. Rozhraní určuje požadované členy typu. Jakákoli třída, která implementuje rozhraní, musí implementovat všechny metody a vlastnosti definované na prototypu rozhraní. Viz @implements.",lends:"Označuje, že s klíči literálu objektu by se mělo zacházet jako s vlastnostmi nějakého jiného objektu. Tato anotace by se měla objevit pouze na literálech objektů.",param:"Používá se s definicemi metod, funkcí a konstruktorů k určení typů argumentů funkcí.",return:"Určuje návratové typy definic metod a funkcí. Za značkou @return musí následovat výraz typu.",template:"Viz Obecné typy.",this:"Určuje typ objektu, na který klíčové slovo odkazuje v rámci funkce. Za touto značkou musí následovat výraz typu.",type:"Identifikuje typ proměnné, vlastnosti nebo výrazu. Za značkou @type musí následovat výraz typu. Můžete také napsat anotaci typu inline a vynechat @type, jako v druhém příkladu.",typedef:"Složité typy (včetně unií a typů záznamů) lze pro pohodlí a udržovatelnost pomocí aliasu aliasovat. Tyto anotace mohou být dlouhé, ale kvůli čitelnosti je lze rozdělit na více řádků.",deprecated:"Varuje před použitím označené funkce, metody nebo vlastnosti by se nemělo používat. Použití zastaralé metody vytvoří upozornění kompilátoru.",final:"U třídy označuje, že tuto třídu není možné rozšířit. U metody označuje, že žádná podtřída nemá povoleno přepsat tuto metodu.",package:"Označí člena nebo vlastnost jako soukromou zásilku. Pouze kód ve stejném adresáři má přístup ke jménům označeným @ balíček. Zejména kód v nadřazených a podřízených adresářích nemá přístup k názvům označeným @ balíček.",public:"Označuje, že člen nebo vlastnost je veřejná. Vlastnost označená @ veřejnost je přístupná všem kódům v libovolném souboru. Toto je implicitní výchozí a zřídka používané. To se nepoužívá k označení, že název by měl být zachován v obfuscating builds viz @export.",private:"Označí člena jako soukromého. Pouze kód ve stejném souboru má přístup ke globálním proměnným a funkcím označeným @private. Konstruktory označené @private lze vytvořit pouze pomocí kódu ve stejném souboru a podle jejich statických členů a členů instance.",protected:"Označuje, že člen nebo vlastnost jsou chráněny. Vlastnost označená @protected je přístupná pro:",const:"Označí proměnnou jako jen pro čtení. Kompilátor může vkládat proměnné @const, což optimalizuje kód JavaScript.",dict:"@dict se používá k vytváření objektů s proměnným počtem vlastností. Když je konstruktor (v příkladu Foo) opatřen poznámkou @dict, můžete použít přístup k vlastnostem objektů Foo pouze v závorce. Anotaci lze také použít přímo na literálech objektů.",implicitCast:"Tato anotace se může objevit pouze v externích deklaracích vlastností. Vlastnost má deklarovaný typ, ale můžete k němu přiřadit libovolný typ bez varování. Při přístupu k vlastnosti získáte zpět hodnotu deklarovaného typu. Například element.innerHTML lze přiřadit libovolný typ, ale vždy vrátí řetězec.",inheritDoc:"Označuje, že metoda nebo vlastnost podtřídy záměrně skrývá metodu nebo vlastnost nadtřídy a má přesně stejnou dokumentaci. Všimněte si, že značka @inheritDoc implikuje značku @override, upřednostňuje se @override.",override:"Označuje, že metoda nebo vlastnost je součástí rozhraní implementovaného třídou nebo záměrně skrývá metodu nebo vlastnost nadtřídy. Pokud nejsou zahrnuty žádné další anotace, metoda nebo vlastnost automaticky zdědí anotace ze své nadtřídy.",polymer:"Označuje, že třída má sémantiku polymerů. Ovlivňuje kompilátor, pouze když je zadán příznak --polymer_pass = 2. Umožňuje průkazu Polymer rozpoznat třídy polymerů a přidat příslušné informace o typu.",polymerBehavior:"Označuje, že globální objekt je použitelný jako chování polymeru. Umožňuje Polymer Pass rozpoznat chování a zkopírovat informace o typu do pomocí definice polymeru. Objekty chování musí být globální.",struct:"@struct se používá k vytváření objektů s pevným počtem vlastností. Když je konstruktor (v příkladu Foo) opatřen poznámkou @struct, můžete použít pouze tečkovou notaci pro přístup k vlastnostem Foo objektů, nikoli notaci závorky. Po zkonstruování také nemůžete přidat vlastnost do instance Foo. Anotaci lze také použít přímo na literálech objektů.",suppress:"Potlačuje varování. Varovné kategorie jsou odděleny | nebo Seznam názvů varování najdete v části Varování.",unrestricted:"Označuje, že třída není ani typ @struct, ani typ @dict. Toto je výchozí nastavení pro staré třídy stylu Closure vytvořené pomocí funkce @constructor. Goog.defineClass i klíčové slovo třídy ES vytvářejí třídy, které jsou ve výchozím nastavení @struct, takže bude muset být explicitně označeno @unrestricted.",define:"Označuje konstantu, kterou může kompilátor přepsat v době kompilace. V příkladu vlevo můžete předat příznak --define = 'ENABLE_DEBUG = false' kompilátoru a změnit hodnotu ENABLE_DEBUG na false. Typ definované konstanty může být number, string nebo boolean. Definuje se pouze v globálním rozsahu.",export:"Když jsou vlastnosti označeny pomocí @export a kompilátor je spuštěn s příznakem --generate_exports, bude vygenerován odpovídající příkaz goog.exportSymbol:",externs:"Deklaruje soubor externs.",fileoverview:"Nastaví blok komentářů tak, aby poskytoval informace na úrovni souboru včetně potlačování.",license:"Řekne kompilátoru, aby vložil přidružený komentář před zkompilovaný kód pro označený soubor. Tato anotace umožňuje, aby důležitá upozornění (například legální licence nebo text o autorských právech) přežila kompilaci beze změny. Konce řádků jsou zachovány.",noalias:"Používá se v souboru externs k označení kompilátoru, že proměnná nebo funkce by neměla být aliasována jako součást průchodu kompilátoru „alias externals“, není ve výchozím nastavení povolena a je k dispozici pouze prostřednictvím rozhraní Java API.",nocompile:"Používá se v horní části souboru, aby kompilátor řekl, aby tento soubor analyzoval, ale nezkompiloval jej. Kód, který není určen pro kompilaci, a měl by být z testů kompilace vynechán (například bootstrapový kód) používá tuto anotaci. Většina kódů by ke změně chování měla používat jiné prostředky, například @define.",nocollapse:"Označuje vlastnost, kterou by kompilátor neměl sbalit do proměnné. Primární použití pro @nocollapse je umožnit export proměnlivých vlastností. Všimněte si, že nesbalené vlastnosti může kompilátor stále přejmenovat. Pokud anotujete vlastnost, která je objektem, pomocí @nocollapse, všechny její vlastnosti také zůstanou nerozbalené.",noinline:"(EXPERIMENTÁLNÍ) Označuje funkci nebo proměnnou, které by neměly být vloženy optimalizacemi.",nosideeffects:"@nosideeffects označuje, že volání deklarované funkce nemá žádné vedlejší účinky. Tato anotace umožňuje kompilátoru odebrat volání funkce, pokud není použita návratová hodnota. Toto není signál, že funkce je „čistá“: může stále číst proměnlivý globální stav.",throws:"Používá se k dokumentování výjimek vyvolaných funkcí. Kontrola typu tyto informace aktuálně nepoužívá. Používá se pouze k zjištění, zda má funkce deklarovaná v souboru externs vedlejší účinky.",abstract:"Podpora @abstract JsDoc a její použití k usnadnění kontroly kompilace sémantiky abstraktních tříd a metod byla po dlouhou dobu požadavkem na funkci Closure Compiler. Tato funkce je k dispozici také v některých dalších systémech volitelného typu JavaScriptu, jako je TypeScript. Closure Compiler přidal podporu pro @abstract na třídy a metody na úrovni typového systému v roce 2016. U nového kódu JavaScriptu by měl být použit @abstract JsDoc ve prospěch goog.abstractMethod."},inlineDocs:{}},de:{blockDocs:{constructor:"Markiert eine Funktion als Konstruktor. Der Compiler benötigt für jede Funktion, die mit dem neuen Schlüsselwort verwendet wird, eine Annotation @constructor. @constructor sollte in den Konstruktormethoden der EcmaScript-Klasse und den Konstruktormethoden von goog.defineClass weggelassen werden.",enum:"Gibt eine Aufzählung an, bei der es sich um einen Typ mit einer bestimmten endlichen Anzahl möglicher Werte handelt, häufig Zeichenfolgen oder Zahlen. Auf das @ enum-Tag muss ein Typausdruck folgen. Wenn der Typ einer Aufzählung weggelassen wird, wird die Nummer angenommen.",extends:"Markiert eine Klasse oder Schnittstelle als von einer anderen Klasse geerbt. Eine mit @extends gekennzeichnete Klasse muss auch entweder mit @constructor, @interface oder @record gekennzeichnet sein.",implements:"Wird mit @constructor verwendet, um anzugeben, dass eine Klasse eine Schnittstelle implementiert.",interface:"Markiert eine Funktion als Schnittstelle. Eine Schnittstelle gibt die erforderlichen Mitglieder eines Typs an. Jede Klasse, die eine Schnittstelle implementiert, muss alle im Prototyp der Schnittstelle definierten Methoden und Eigenschaften implementieren. Siehe @implements.",lends:"Gibt an, dass die Schlüssel eines Objektliteral als Eigenschaften eines anderen Objekts behandelt werden sollen. Diese Anmerkung sollte nur in Objektliteralen erscheinen.",param:"Wird mit Methoden-, Funktions- und Konstruktordefinitionen verwendet, um die Arten von Funktionsargumenten anzugeben.",return:"Gibt die Rückgabetypen von Methoden- und Funktionsdefinitionen an. Auf das @ return-Tag muss ein Typausdruck folgen.",template:"Siehe Generische Typen.",this:"Gibt den Typ des Objekts an, auf das sich das Schlüsselwort innerhalb einer Funktion bezieht. Auf das @ this-Tag muss ein Typausdruck folgen.",type:"Gibt den Typ einer Variablen, Eigenschaft oder eines Ausdrucks an. Auf das @ type-Tag muss ein Typausdruck folgen. Sie können die Typanmerkung auch inline schreiben und @type weglassen, wie im zweiten Beispiel.",typedef:"Komplexe Typen (einschließlich Gewerkschaften und Datensatztypen) können zur Vereinfachung und Wartbarkeit mithilfe eines Typedefs als Alias ​​verwendet werden. Diese Anmerkungen können lang sein, können jedoch zur besseren Lesbarkeit auf mehrere Zeilen aufgeteilt werden.",deprecated:"Warnt davor, die markierte Funktion, Methode oder Eigenschaft zu verwenden, sollte nicht verwendet werden. Die Verwendung einer veralteten Methode erzeugt eine Compiler-Warnung.",final:"Gibt in einer Klasse an, dass diese Klasse nicht erweitert werden darf. Gibt bei einer Methode an, dass keine Unterklasse diese Methode überschreiben darf.",package:"Markiert ein Mitglied oder eine Eigenschaft als privates Paket. Nur Code im selben Verzeichnis kann auf Namen zugreifen, die mit @package gekennzeichnet sind. Insbesondere kann Code in übergeordneten und untergeordneten Verzeichnissen nicht auf Namen zugreifen, die mit @package gekennzeichnet sind.",public:"Gibt an, dass ein Mitglied oder eine Eigenschaft öffentlich ist. Eine mit @public gekennzeichnete Eigenschaft ist für den gesamten Code in einer beliebigen Datei zugänglich. Dies ist die implizite Standardeinstellung und wird nur selten verwendet. Dies wird nicht verwendet, um anzugeben, dass der Name in verschleierten Builds beibehalten werden soll (siehe @export).",private:"Markiert ein Mitglied als privat. Nur Code in derselben Datei kann auf globale Variablen und Funktionen zugreifen, die mit @private gekennzeichnet sind. Mit @private gekennzeichnete Konstruktoren können nur durch Code in derselben Datei sowie durch ihre statischen und Instanzmitglieder instanziiert werden.",protected:"Gibt an, dass ein Mitglied oder eine Eigenschaft geschützt ist. Eine mit @protected gekennzeichnete Eigenschaft ist zugänglich für:",const:"Markiert eine Variable als schreibgeschützt. Der Compiler kann @ const-Variablen einbinden, wodurch der JavaScript-Code optimiert wird.",dict:"@dict wird verwendet, um Objekte mit einer variablen Anzahl von Eigenschaften zu erstellen. Wenn ein Konstruktor (im Beispiel Foo) mit @dict versehen ist, können Sie nur die Klammernotation verwenden, um auf die Eigenschaften von Foo-Objekten zuzugreifen. Die Annotation kann auch direkt für Objektliterale verwendet werden.",implicitCast:"Diese Anmerkung kann nur in externen Eigenschaftsdeklarationen angezeigt werden. Die Eigenschaft hat einen deklarierten Typ, aber Sie können ihr ohne Warnung einen beliebigen Typ zuweisen. Beim Zugriff auf die Eigenschaft erhalten Sie einen Wert des deklarierten Typs zurück. Beispielsweise kann element.innerHTML einem beliebigen Typ zugewiesen werden, gibt jedoch immer eine Zeichenfolge zurück.",inheritDoc:"Gibt an, dass eine Methode oder Eigenschaft einer Unterklasse absichtlich eine Methode oder Eigenschaft der Oberklasse verbirgt und genau dieselbe Dokumentation enthält. Beachten Sie, dass das @ inheritDoc-Tag das @ override-Tag impliziert. @Override wird bevorzugt.",override:"Gibt an, dass eine Methode oder Eigenschaft Teil einer von der Klasse implementierten Schnittstelle ist oder absichtlich eine Methode oder Eigenschaft der Oberklasse verbirgt. Wenn keine anderen Anmerkungen enthalten sind, erbt die Methode oder Eigenschaft automatisch Anmerkungen von ihrer Oberklasse.",polymer:"Gibt an, dass eine Klasse über eine Polymersemantik verfügt. Betrifft den Compiler nur, wenn das Flag --polymer_pass = 2 angegeben ist. Ermöglicht dem Polymer Pass, Polymerklassen zu erkennen und entsprechende Typinformationen hinzuzufügen.",polymerBehavior:"Zeigt an, dass ein globales Objekt als Polymerverhalten verwendet werden kann. Ermöglicht dem Polymer Pass, Verhaltensweisen zu erkennen und Typinformationen in die verwendete Polymerdefinition zu kopieren. Verhaltensobjekte müssen global sein.",struct:"@struct wird verwendet, um Objekte mit einer festen Anzahl von Eigenschaften zu erstellen. Wenn ein Konstruktor (im Beispiel Foo) mit @struct versehen ist, können Sie nur mit der Punktnotation auf die Eigenschaften von Foo-Objekten zugreifen, nicht auf die Klammernotation. Außerdem können Sie einer Foo-Instanz nach ihrer Erstellung keine Eigenschaft hinzufügen. Die Annotation kann auch direkt für Objektliterale verwendet werden.",suppress:"Unterdrückt Warnungen. Warnkategorien werden durch | getrennt oder ,. Eine Liste der Warnnamen finden Sie unter Warnungen.",unrestricted:"Gibt an, dass eine Klasse weder ein @ struct-Typ noch ein @ dict-Typ ist. Dies ist die Standardeinstellung für alte Klassen im Closure-Stil, die mit der Funktion @constructor erstellt wurden. Sowohl goog.defineClass als auch das Schlüsselwort der ES-Klasse erzeugen Klassen, die standardmäßig @struct sind und daher explizit als @unrestricted gekennzeichnet werden müssen.",define:"Gibt eine Konstante an, die vom Compiler zur Kompilierungszeit überschrieben werden kann. Im Beispiel links können Sie das Flag --define = 'ENABLE_DEBUG = false' an den Compiler übergeben, um den Wert von ENABLE_DEBUG in false zu ändern. Der Typ einer definierten Konstante kann number, string oder boolean sein. Definitionen sind nur im globalen Bereich zulässig.",export:"Wenn Eigenschaften mit @export markiert sind und der Compiler mit dem Flag --generate_exports ausgeführt wird, wird eine entsprechende Anweisung goog.exportSymbol generiert:",externs:"Deklariert eine externe Datei.",fileoverview:"Lässt den Kommentarblock Informationen auf Dateiebene einschließlich Unterdrückungen bereitstellen.",license:"Weist den Compiler an, den zugehörigen Kommentar vor dem kompilierten Code für die markierte Datei einzufügen. Diese Anmerkung ermöglicht es wichtigen Hinweisen (wie gesetzlichen Lizenzen oder urheberrechtlich geschütztem Text), die Zusammenstellung unverändert zu überstehen. Zeilenumbrüche bleiben erhalten.",noalias:'Wird in einer externen Datei verwendet, um dem Compiler anzuzeigen, dass die Variable oder Funktion nicht als Teil des \\"Alias ​​externals\\" -Pass des Compilers aliasiert werden soll. Sie ist standardmäßig nicht aktiviert und nur über die Java-API verfügbar.',nocompile:"Wird oben in einer Datei verwendet, um den Compiler anzuweisen, diese Datei zu analysieren, aber nicht zu kompilieren. Code, der nicht für die Kompilierung gedacht ist und bei Kompilierungstests weggelassen werden sollte (z. B. Bootstrap-Code), verwendet diese Anmerkung. Der meiste Code sollte andere Mittel wie @define verwenden, um das Verhalten zu ändern.",nocollapse:"Bezeichnet eine Eigenschaft, die vom Compiler nicht in eine Variable reduziert werden soll. Die Hauptverwendung für @nocollapse besteht darin, den Export veränderlicher Eigenschaften zu ermöglichen. Beachten Sie, dass nicht reduzierte Eigenschaften vom Compiler weiterhin umbenannt werden können. Wenn Sie eine Eigenschaft, die ein Objekt ist, mit @nocollapse kommentieren, bleiben auch alle ihre Eigenschaften nicht kollabiert.",noinline:"(EXPERIMENTELL) Bezeichnet eine Funktion oder Variable, die von den Optimierungen nicht berücksichtigt werden sollte.",nosideeffects:'@nosideeffects gibt an, dass ein Aufruf der deklarierten Funktion keine Nebenwirkungen hat. Mit dieser Anmerkung kann der Compiler Aufrufe der Funktion entfernen, wenn der Rückgabewert nicht verwendet wird. Dies ist kein Signal dafür, dass die Funktion \\"rein\\" ist: Sie kann immer noch einen veränderlichen globalen Zustand lesen.',throws:"Wird verwendet, um die von einer Funktion ausgelösten Ausnahmen zu dokumentieren. Die Typprüfung verwendet diese Informationen derzeit nicht. Es wird nur verwendet, um herauszufinden, ob eine in einer externen Datei deklarierte Funktion Nebenwirkungen hat.",abstract:"Die Unterstützung von @abstract JsDoc und dessen Verwendung zur Unterstützung der Überprüfung der Semantik abstrakter Klassen und Methoden während der Kompilierungszeit war lange Zeit eine Funktionsanforderung an Closure Compiler. Diese Funktion ist auch in einigen anderen optionalen JavaScript-Typsystemen wie TypeScript vorhanden. Closure Compiler hat 2016 Unterstützung für @abstract für Klassen und Methoden auf Typsystemebene hinzugefügt. Für neuen JavaScript-Code sollte @abstract JsDoc zugunsten von goog.abstractMethod verwendet werden."},inlineDocs:{}},es:{blockDocs:{constructor:"Marca una función como constructor. El compilador requiere una anotación @constructor para cualquier función que se utilice con la nueva palabra clave. @constructor debe omitirse de los métodos constructores de la clase EcmaScript y de los métodos constructores goog.defineClass.",enum:"Especifica una enumeración, que es un tipo con un número finito específico de valores posibles, a menudo cadenas o números. La etiqueta @enum debe ir seguida de una expresión de tipo. Si se omite el tipo de enumeración, se asume un número.",extends:"Marca una clase o interfaz como heredada de otra clase. Una clase marcada con @extends también debe estar marcada con @constructor, @interface o @record.",implements:"Se usa con @constructor para indicar que una clase implementa una interfaz.",interface:"Marca una función como interfaz. Una interfaz especifica los miembros necesarios de un tipo. Cualquier clase que implemente una interfaz debe implementar todos los métodos y propiedades definidos en el prototipo de la interfaz. Ver @implementos.",lends:"Indica que las claves de un objeto literal deben tratarse como propiedades de algún otro objeto. Esta anotación solo debería aparecer en objetos literales.",param:"Se utiliza con definiciones de método, función y constructor para especificar los tipos de argumentos de función.",return:"Especifica los tipos de retorno de definiciones de métodos y funciones. La etiqueta @return debe ir seguida de una expresión de tipo.",template:"Consulte Tipos genéricos.",this:"Especifica el tipo de objeto al que se refiere la palabra clave this dentro de una función. La etiqueta @this debe ir seguida de una expresión de tipo.",type:"Identifica el tipo de variable, propiedad o expresión. La etiqueta @type debe ir seguida de una expresión de tipo. También puede escribir la anotación de tipo en línea y omitir @type, como en el segundo ejemplo.",typedef:"Los tipos complejos (incluidas las uniones y los tipos de registro) pueden tener un alias para mayor comodidad y facilidad de mantenimiento mediante typedef. Estas anotaciones pueden ser largas, pero se pueden dividir en varias líneas para facilitar la lectura.",deprecated:"Advierte contra el uso de la función, el método o la propiedad marcados que no deben usarse. El uso de un método obsoleto genera una advertencia del compilador.",final:"En una clase, indica que esta clase no puede ampliarse. En un método, indica que no se permite que ninguna subclase anule ese método.",package:"Marca un miembro o una propiedad como paquete privado. Solo el código del mismo directorio puede acceder a los nombres marcados con @package. En particular, el código de los directorios principal y secundario no puede acceder a los nombres marcados con @package.",public:"Indica que un miembro o una propiedad es pública. Una propiedad marcada como @public es accesible para todo el código en cualquier archivo. Este es el valor predeterminado implícito y rara vez se utiliza. Esto no se usa para indicar que el nombre debe conservarse en compilaciones ofuscantes, ver @export.",private:"Marca a un miembro como privado. Solo el código del mismo archivo puede acceder a las variables y funciones globales marcadas como @private. Los constructores marcados como @private solo se pueden instanciar mediante código en el mismo archivo y por sus miembros estáticos y de instancia.",protected:"Indica que un miembro o una propiedad están protegidos. Una propiedad marcada como @protected es accesible para:",const:"Marca una variable como de solo lectura. El compilador puede incorporar variables @const, lo que optimiza el código JavaScript.",dict:"@dict se utiliza para crear objetos con un número variable de propiedades. Cuando un constructor (Foo en el ejemplo) está anotado con @dict, solo puede usar la notación de corchetes para acceder a las propiedades de los objetos Foo. La anotación también se puede utilizar directamente en objetos literales.",implicitCast:"Esta anotación solo puede aparecer en declaraciones de propiedad externas. La propiedad tiene un tipo declarado, pero puede asignarle cualquier tipo sin una advertencia. Al acceder a la propiedad, obtiene un valor del tipo declarado. Por ejemplo, a element.innerHTML se le puede asignar cualquier tipo, pero siempre devolverá una cadena.",inheritDoc:"Indica que un método o propiedad de una subclase oculta intencionalmente un método o propiedad de la superclase y tiene exactamente la misma documentación. Tenga en cuenta que la etiqueta @inheritDoc implica la etiqueta @override, se prefiere @override.",override:"Indica que un método o propiedad es parte de una interfaz implementada por la clase o esconde intencionalmente un método o propiedad de la superclase. Si no se incluyen otras anotaciones, el método o la propiedad hereda automáticamente las anotaciones de su superclase.",polymer:"Indica que una clase tiene semántica de polímeros. Solo afecta al compilador cuando se especifica el indicador --polymer_pass = 2. Permite que Polymer Pass reconozca las clases de polímeros y agregue la información de tipo adecuada.",polymerBehavior:"Indica que un objeto global se puede utilizar como comportamiento de polímero. Permite que Polymer Pass reconozca comportamientos y copie información de tipo en la definición de Polymer que utiliza. Los objetos de comportamiento deben ser globales.",struct:"@struct se utiliza para crear objetos con un número fijo de propiedades. Cuando un constructor (Foo en el ejemplo) está anotado con @struct, solo puede usar la notación de puntos para acceder a las propiedades de los objetos Foo, no la notación de corchetes. Además, no puede agregar una propiedad a una instancia de Foo después de su construcción. La anotación también se puede utilizar directamente en objetos literales.",suppress:"Suprime las advertencias. Las categorías de advertencia están separadas por | o,. Para obtener una lista de los nombres de advertencias, consulte Advertencias.",unrestricted:"Indica que una clase no es un tipo @struct ni un tipo @dict. Este es el valor predeterminado para las antiguas clases de estilo Closure creadas con una función @constructor. Tanto goog.defineClass como la palabra clave de clase ES producen clases que son @struct por defecto, por lo que deberán etiquetarse explícitamente como @unrestricted.",define:"Indica una constante que el compilador puede invalidar en tiempo de compilación. Con el ejemplo de la izquierda, puede pasar la bandera --define = 'ENABLE_DEBUG = false' al compilador para cambiar el valor de ENABLE_DEBUG a falso. El tipo de una constante definida puede ser número, cadena o booleano. Las definiciones solo se permiten en el ámbito global.",export:"Cuando las propiedades están marcadas con @export y el compilador se ejecuta con la marca --generate_exports, se generará una declaración goog.exportSymbol correspondiente:",externs:"Declara un archivo externo.",fileoverview:"Hace que el bloque de comentarios proporcione información a nivel de archivo, incluidas las supresiones.",license:"Le dice al compilador que inserte el comentario asociado antes del código compilado para el archivo marcado. Esta anotación permite que los avisos importantes (como licencias legales o texto de derechos de autor) sobrevivan a la compilación sin cambios. Se conservan los saltos de línea.",noalias:'Se usa en un archivo externo para indicarle al compilador que la variable o función no debe tener un alias como parte del paso \\"alias externals\\" del compilador, no está habilitado de forma predeterminada y solo está disponible a través de la API de Java.',nocompile:"Se usa en la parte superior de un archivo para decirle al compilador que analice este archivo pero no lo compile. El código que no está destinado a la compilación y debe omitirse de las pruebas de compilación (como el código de arranque) utiliza esta anotación. La mayor parte del código debería utilizar otros medios como @define para cambiar el comportamiento.",nocollapse:"Denota una propiedad que el compilador no debe contraer en una variable. El uso principal de @nocollapse es permitir la exportación de propiedades mutables. Tenga en cuenta que el compilador puede cambiar el nombre de las propiedades no contraídas. Si anota una propiedad que es un objeto con @nocollapse, todas sus propiedades también permanecerán sin contraer.",noinline:"(EXPERIMENTAL) Denota una función o variable que no debe estar alineada con las optimizaciones.",nosideeffects:'@nosideeffects indica que una llamada a la función declarada no tiene efectos secundarios. Esta anotación permite al compilador eliminar llamadas a la función si no se usa el valor de retorno. Esto no es una señal de que la función sea \\"pura\\": aún puede leer un estado global mutable.',throws:"Se utiliza para documentar las excepciones generadas por una función. El verificador de tipos no utiliza actualmente esta información. Solo se usa para averiguar si una función declarada en un archivo externo tiene efectos secundarios.",abstract:"Apoyar el @abstract JsDoc y usarlo para ayudar a las comprobaciones en tiempo de compilación de la semántica de las clases y métodos abstractos fue una solicitud de característica a Closure Compiler durante mucho tiempo. Esta característica también está presente en algunos otros sistemas de tipos opcionales de JavaScript, como TypeScript. Closure Compiler agregó soporte para @abstract en clases y métodos a nivel de sistema de tipos en 2016. Para el nuevo código JavaScript, el @abstract JsDoc debe usarse en favor de goog.abstractMethod."},inlineDocs:{}},fr:{blockDocs:{constructor:"Marque une fonction comme constructeur. Le compilateur nécessite une annotation @constructor pour toute fonction utilisée avec le nouveau mot clé. @constructor doit être omis des méthodes de constructeur de classe EcmaScript et des méthodes de constructeur goog.defineClass.",enum:"Spécifie une énumération, qui est un type avec un nombre fini spécifique de valeurs possibles, souvent des chaînes ou des nombres. La balise @enum doit être suivie d'une expression de type. Si le type d'une énumération est omis, nombre est supposé.",extends:"Marque une classe ou une interface comme héritant d'une autre classe. Une classe marquée avec @extends doit également être marquée avec @constructor, @interface ou @record.",implements:"Utilisé avec @constructor pour indiquer qu'une classe implémente une interface.",interface:"Marque une fonction comme une interface. Une interface spécifie les membres requis d'un type. Toute classe qui implémente une interface doit implémenter toutes les méthodes et propriétés définies sur le prototype de l'interface. Voir @implements.",lends:"Indique que les clés d'un littéral d'objet doivent être traitées comme les propriétés d'un autre objet. Cette annotation ne doit apparaître que sur les littéraux d'objet.",param:"Utilisé avec des définitions de méthode, de fonction et de constructeur pour spécifier les types d'arguments de fonction.",return:"Spécifie les types de retour des définitions de méthode et de fonction. La balise @return doit être suivie d'une expression de type.",template:"Voir Types génériques.",this:"Spécifie le type de l'objet auquel le mot-clé this fait référence dans une fonction. La balise @this doit être suivie d'une expression de type.",type:"Identifie le type d'une variable, d'une propriété ou d'une expression. La balise @type doit être suivie d'une expression de type. Vous pouvez également écrire l'annotation de type en ligne et omettre @type, comme dans le deuxième exemple.",typedef:"Les types complexes (y compris les unions et les types d'enregistrement) peuvent être aliasés pour plus de commodité et de maintenabilité à l'aide d'un typedef. Ces annotations peuvent être longues, mais peuvent être réparties sur plusieurs lignes pour plus de lisibilité.",deprecated:"Les avertissements contre l'utilisation de la fonction, méthode ou propriété marquée ne doivent pas être utilisés. L'utilisation d'une méthode obsolète produit un avertissement du compilateur.",final:"Sur une classe, indique que cette classe ne peut pas être étendue. Sur une méthode, indique qu'aucune sous-classe n'est autorisée à remplacer cette méthode.",package:"Marque un membre ou une propriété comme package privé. Seul le code du même répertoire peut accéder aux noms marqués @package. En particulier, le code des répertoires parent et enfant ne peut pas accéder aux noms marqués @package.",public:"Indique qu'un membre ou une propriété est public. Une propriété marquée @public est accessible à tout le code dans n'importe quel fichier. Il s'agit de la valeur implicite par défaut et rarement utilisée. Ceci n'est pas utilisé pour indiquer que le nom doit être conservé dans les versions obscurcissantes, voir @export.",private:"Marque un membre comme privé. Seul le code du même fichier peut accéder aux variables globales et aux fonctions marquées @private. Les constructeurs marqués @private ne peuvent être instanciés que par du code dans le même fichier et par leurs membres statiques et d'instance.",protected:"Indique qu'un membre ou une propriété est protégé. Une propriété marquée @protected est accessible à:",const:"Marque une variable en lecture seule. Le compilateur peut insérer des variables @const, ce qui optimise le code JavaScript.",dict:"@dict est utilisé pour créer des objets avec un nombre variable de propriétés. Lorsqu'un constructeur (Foo dans l'exemple) est annoté avec @dict, vous ne pouvez utiliser que la notation entre crochets pour accéder aux propriétés des objets Foo. L'annotation peut également être utilisée directement sur les littéraux d'objet.",implicitCast:"Cette annotation ne peut apparaître que dans les déclarations de propriété externs. La propriété a un type déclaré, mais vous pouvez lui attribuer n'importe quel type sans avertissement. Lors de l'accès à la propriété, vous récupérez une valeur du type déclaré. Par exemple, element.innerHTML peut recevoir n'importe quel type, mais retournera toujours une chaîne.",inheritDoc:"Indique qu'une méthode ou une propriété d'une sous-classe masque intentionnellement une méthode ou une propriété de la superclasse et a exactement la même documentation. Notez que la balise @inheritDoc implique la balise @override, @override est préférable.",override:"Indique qu'une méthode ou une propriété fait partie d'une interface implémentée par la classe ou qu'elle masque intentionnellement une méthode ou une propriété de la superclasse. Si aucune autre annotation n'est incluse, la méthode ou la propriété hérite automatiquement des annotations de sa superclasse.",polymer:"Indique qu'une classe a une sémantique Polymer. N'affecte le compilateur que lorsque l'indicateur --polymer_pass = 2 est spécifié. Permet à Polymer Pass de reconnaître les classes Polymer et d'ajouter des informations de type appropriées.",polymerBehavior:"Indique qu'un objet global est utilisable en tant que comportement Polymer. Permet à Polymer Pass de reconnaître les comportements et de copier les informations de type dans la définition Polymer en utilisant. Les objets de comportement doivent être globaux.",struct:"@struct est utilisé pour créer des objets avec un nombre fixe de propriétés. Lorsqu'un constructeur (Foo dans l'exemple) est annoté avec @struct, vous ne pouvez utiliser que la notation par points pour accéder aux propriétés des objets Foo, pas la notation entre crochets. De plus, vous ne pouvez pas ajouter une propriété à une instance Foo après sa construction. L'annotation peut également être utilisée directement sur les littéraux d'objet.",suppress:"Supprime les avertissements. Les catégories d'avertissement sont séparées par | ou ,. Pour obtenir la liste des noms d'avertissement, consultez les avertissements.",unrestricted:"Indique qu'une classe n'est ni un type @struct ni un type @dict. Il s'agit de la valeur par défaut pour les anciennes classes de style Closure créées avec une fonction @constructor. Goog.defineClass et le mot-clé de classe ES produisent des classes qui sont @struct par défaut, elles devront donc être explicitement étiquetées @unrestricted.",define:"Indique une constante qui peut être remplacée par le compilateur au moment de la compilation. Avec l'exemple de gauche, vous pouvez passer l'indicateur --define = 'ENABLE_DEBUG = false' au compilateur pour changer la valeur de ENABLE_DEBUG en false. Le type d'une constante définie peut être un nombre, une chaîne ou une valeur booléenne. Les définitions ne sont autorisées que dans la portée globale.",export:"Lorsque les propriétés sont marquées avec @export et que le compilateur est exécuté avec l'indicateur --generate_exports, une instruction goog.exportSymbol correspondante sera générée:",externs:"Déclare un fichier externe.",fileoverview:"Permet au bloc de commentaires de fournir des informations au niveau du fichier, y compris les suppressions.",license:"Indique au compilateur d'insérer le commentaire associé avant le code compilé pour le fichier marqué. Cette annotation permet à des avis importants (tels que les licences légales ou le texte de copyright) de survivre à la compilation sans modification. Les sauts de ligne sont conservés.",noalias:"Utilisé dans un fichier externs pour indiquer au compilateur que la variable ou la fonction ne doit pas être aliasée dans le cadre de la passe \\\"alias externals\\\" du compilateur, n'est pas activée par défaut et uniquement disponible via l'API Java.",nocompile:"Utilisé en haut d'un fichier pour dire au compilateur d'analyser ce fichier mais de ne pas le compiler. Le code qui n'est pas destiné à la compilation et qui doit être omis des tests de compilation (comme le code d'amorçage) utilise cette annotation. La plupart du code doit utiliser d'autres moyens tels que @define pour changer de comportement.",nocollapse:"Désigne une propriété qui ne doit pas être réduite par le compilateur en une variable. L'utilisation principale de @nocollapse est d'autoriser l'exportation des propriétés mutables. Notez que les propriétés non réduites peuvent toujours être renommées par le compilateur. Si vous annotez une propriété qui est un objet avec @nocollapse, toutes ses propriétés resteront également non regroupées.",noinline:"(EXPERIMENTAL) Désigne une fonction ou une variable qui ne doit pas être incorporée par les optimisations.",nosideeffects:"@nosideeffects indique qu'un appel à la fonction déclarée n'a aucun effet secondaire. Cette annotation permet au compilateur de supprimer les appels à la fonction si la valeur de retour n'est pas utilisée. Ce n'est pas un signal que la fonction est \\\"pure\\\": elle peut toujours lire l'état global mutable.",throws:"Utilisé pour documenter les exceptions levées par une fonction. Le vérificateur de type n'utilise pas actuellement ces informations. Il n'est utilisé que pour déterminer si une fonction déclarée dans un fichier externs a des effets secondaires.",abstract:"La prise en charge de @abstract JsDoc et son utilisation pour faciliter les vérifications au moment de la compilation sur la sémantique des classes et des méthodes abstraites était une demande de fonctionnalité de Closure Compiler pendant longtemps. Cette fonctionnalité est également présente dans certains autres systèmes de type facultatifs JavaScript, tels que TypeScript. Closure Compiler a ajouté la prise en charge de @abstract sur les classes et les méthodes au niveau du système de types en 2016. Pour le nouveau code JavaScript, le @abstract JsDoc devrait être utilisé en faveur de goog.abstractMethod."},inlineDocs:{}},it:{blockDocs:{constructor:"Contrassegna una funzione come costruttore. Il compilatore richiede un'annotazione @constructor per qualsiasi funzione utilizzata con la nuova parola chiave. @constructor deve essere omesso dai metodi del costruttore della classe EcmaScript e dai metodi del costruttore goog.defineClass.",enum:"Specifica un'enumerazione, che è un tipo con un numero finito specifico di valori possibili, spesso stringhe o numeri. Il tag @enum deve essere seguito da un'espressione di tipo. Se il tipo di enumerazione viene omesso, viene utilizzato il numero.",extends:"Contrassegna una classe o un'interfaccia come ereditata da un'altra classe. Una classe contrassegnata con @extends deve anche essere contrassegnata con @constructor, @interface o @record.",implements:"Utilizzato con @constructor per indicare che una classe implementa un'interfaccia.",interface:"Contrassegna una funzione come interfaccia. Un'interfaccia specifica i membri richiesti di un tipo. Qualsiasi classe che implementa un'interfaccia deve implementare tutti i metodi e le proprietà definiti nel prototipo dell'interfaccia. Vedi @implements.",lends:"Indica che le chiavi di un oggetto letterale devono essere trattate come proprietà di un altro oggetto. Questa annotazione dovrebbe apparire solo sui letterali oggetto.",param:"Utilizzato con definizioni di metodi, funzioni e costruttori per specificare i tipi di argomenti della funzione.",return:"Specifica i tipi restituiti di metodi e definizioni di funzioni. Il tag @return deve essere seguito da un'espressione di tipo.",template:"Vedi Tipi generici.",this:"Specifica il tipo di oggetto a cui fa riferimento la parola chiave all'interno di una funzione. Il tag @this deve essere seguito da un'espressione di tipo.",type:"Identifica il tipo di una variabile, una proprietà o un'espressione. Il tag @type deve essere seguito da un'espressione di tipo. Puoi anche scrivere l'annotazione del tipo inline e omettere @type, come nel secondo esempio.",typedef:"I tipi complessi (comprese le unioni e i tipi di record) possono essere alias per comodità e manutenibilità utilizzando un typedef. Queste annotazioni possono essere lunghe, ma possono essere suddivise su più righe per la leggibilità.",deprecated:"Avverte di non utilizzare la funzione, il metodo o la proprietà contrassegnati. L'utilizzo di un metodo deprecato produce un avviso del compilatore.",final:"In una classe, indica che questa classe non può essere estesa. Su un metodo, indica che nessuna sottoclasse è autorizzata a sovrascrivere quel metodo.",package:"Contrassegna un membro o una proprietà come pacchetto privato. Solo il codice nella stessa directory può accedere ai nomi contrassegnati con @package. In particolare, il codice nelle directory padre e figlio non può accedere ai nomi contrassegnati con @package.",public:"Indica che un membro o una proprietà è pubblica. Una proprietà contrassegnata con @public è accessibile a tutto il codice in qualsiasi file. Questa è l'impostazione predefinita implicita e utilizzata raramente. Non viene utilizzato per indicare che il nome deve essere mantenuto nelle build offuscate, vedere @export.",private:"Contrassegna un membro come privato. Solo il codice nello stesso file può accedere alle variabili globali e alle funzioni contrassegnate con @private. I costruttori contrassegnati con @private possono essere istanziati solo dal codice nello stesso file e dai membri statici e di istanza.",protected:"Indica che un membro o una proprietà è protetto. Una proprietà contrassegnata con @protected è accessibile a:",const:"Contrassegna una variabile come di sola lettura. Il compilatore può incorporare variabili @const, che ottimizzano il codice JavaScript.",dict:"@dict viene utilizzato per creare oggetti con un numero variabile di proprietà. Quando un costruttore (Foo nell'esempio) è annotato con @dict, puoi usare solo la notazione delle parentesi per accedere alle proprietà degli oggetti Foo. L'annotazione può anche essere utilizzata direttamente sui letterali oggetto.",implicitCast:"Questa annotazione può apparire solo nelle dichiarazioni di proprietà externs. La proprietà ha un tipo dichiarato, ma è possibile assegnarle qualsiasi tipo senza avviso. Quando si accede alla proprietà, si ottiene indietro un valore del tipo dichiarato. Ad esempio, element.innerHTML può essere assegnato a qualsiasi tipo, ma restituirà sempre una stringa.",inheritDoc:"Indica che un metodo o una proprietà di una sottoclasse nasconde intenzionalmente un metodo o una proprietà della superclasse e ha esattamente la stessa documentazione. Nota che il tag @inheritDoc implica il tag @override, @override è preferito.",override:"Indica che un metodo o una proprietà fa parte di un'interfaccia implementata dalla classe o nasconde intenzionalmente un metodo o una proprietà della superclasse. Se non vengono incluse altre annotazioni, il metodo o la proprietà eredita automaticamente le annotazioni dalla sua superclasse.",polymer:"Indica che una classe ha la semantica Polymer. Ha effetto solo sul compilatore quando è specificato il flag --polymer_pass = 2. Consente al Polymer Pass di riconoscere le classi di polimeri e di aggiungere informazioni sul tipo appropriate.",polymerBehavior:"Indica che un oggetto globale è utilizzabile come comportamento Polymer. Consente al Polymer Pass di riconoscere i comportamenti e copiare le informazioni sul tipo nella definizione del polimero in uso. Gli oggetti comportamento devono essere globali.",struct:"@struct viene utilizzato per creare oggetti con un numero fisso di proprietà. Quando un costruttore (Foo nell'esempio) viene annotato con @struct, puoi usare solo la notazione punto per accedere alle proprietà degli oggetti Foo, non la notazione parentesi. Inoltre, non è possibile aggiungere una proprietà a un'istanza Foo dopo che è stata costruita. L'annotazione può anche essere utilizzata direttamente sui letterali oggetto.",suppress:"Elimina gli avvisi. Le categorie di avviso sono separate da | o ,. Per un elenco dei nomi degli avvisi, dai un'occhiata agli avvisi.",unrestricted:"Indica che una classe non è né un tipo @struct né un tipo @dict. Questa è l'impostazione predefinita per le vecchie classi in stile Closure create con una funzione @constructor. Sia goog.defineClass che la parola chiave della classe ES producono classi che sono @struct per impostazione predefinita, quindi dovranno essere etichettate esplicitamente con @unrestricted.",define:"Indica una costante che può essere sovrascritta dal compilatore in fase di compilazione. Con l'esempio a sinistra, puoi passare il flag --define = 'ENABLE_DEBUG = false' al compilatore per modificare il valore di ENABLE_DEBUG in false. Il tipo di una costante definita può essere numero, stringa o booleano. Le definizioni sono consentite solo nell'ambito globale.",export:"Quando le proprietà sono contrassegnate con @export e il compilatore viene eseguito con il flag --generate_exports, verrà generata un'istruzione goog.exportSymbol corrispondente:",externs:"Dichiara un file externs.",fileoverview:"Fa in modo che il blocco dei commenti fornisca informazioni a livello di file comprese le soppressioni.",license:"Indica al compilatore di inserire il commento associato prima del codice compilato per il file contrassegnato. Questa annotazione consente agli avvisi importanti (come licenze legali o testo di copyright) di sopravvivere alla compilazione senza modifiche. Le interruzioni di riga vengono mantenute.",noalias:'Utilizzato in un file externs per indicare al compilatore che la variabile o la funzione non deve essere alias come parte del passaggio \\"alias externals\\" del compilatore, non è abilitato per impostazione predefinita ed è disponibile solo tramite l\'API Java.',nocompile:"Usato all'inizio di un file per dire al compilatore di analizzare questo file ma non di compilarlo. Il codice che non è inteso per la compilazione e dovrebbe essere omesso dai test di compilazione (come il codice bootstrap) utilizza questa annotazione. La maggior parte del codice dovrebbe utilizzare altri mezzi come @define per modificare il comportamento.",nocollapse:"Denota una proprietà che non dovrebbe essere compressa dal compilatore in una variabile. L'utilizzo principale di @nocollapse è consentire l'esportazione di proprietà modificabili. Notare che le proprietà non compresse possono ancora essere rinominate dal compilatore. Se annoti una proprietà che è un oggetto con @nocollapse, anche tutte le sue proprietà rimarranno non compresse.",noinline:"(SPERIMENTALE) Indica una funzione o una variabile che non dovrebbe essere inserita nelle ottimizzazioni.",nosideeffects:'@nosideeffects indica che una chiamata alla funzione dichiarata non ha effetti collaterali. Questa annotazione consente al compilatore di rimuovere le chiamate alla funzione se il valore restituito non viene utilizzato. Questo non è un segnale che la funzione è \\"pura\\": può ancora leggere lo stato globale mutabile.',throws:"Utilizzato per documentare le eccezioni generate da una funzione. Il controllo del tipo attualmente non utilizza queste informazioni. Viene utilizzato solo per capire se una funzione dichiarata in un file externs ha effetti collaterali.",abstract:"Supportare @abstract JsDoc e usarlo per aiutare i controlli in fase di compilazione sulla semantica di classi e metodi astratti è stata una richiesta di funzionalità per Closure Compiler per molto tempo. Questa funzione è presente anche in alcuni altri sistemi di tipo opzionale JavaScript, come TypeScript. Closure Compiler ha aggiunto il supporto per @abstract su classi e metodi a livello di sistema di tipo nel 2016. Per il nuovo codice JavaScript, il @abstract JsDoc dovrebbe essere utilizzato a favore di goog.abstractMethod."},inlineDocs:{}},ja:{blockDocs:{constructor:"関数をコンストラクターとしてマークします。コンパイラーは、新しいキーワードで使用されるすべての関数に@constructorアノテーションを必要とします。 EcmaScriptクラスコンストラクターメソッドおよびgoog.defineClassコンストラクターメソッドから@constructorを省略する必要があります。",enum:"enumを指定します。これは、特定の有限数の可能な値（通常は文字列または数値）を持つタイプです。 @enumタグの後には、型式を続ける必要があります。 enumのタイプが省略された場合、numberが想定されます。",extends:"クラスまたはインターフェースを別のクラスから継承するものとしてマークします。 @extendsでマークされたクラスは、@ constructor、@ interface、または@recordでもマークする必要があります。",implements:"@constructorと共に使用して、クラスがインターフェースを実装することを示します。",interface:"関数をインターフェースとしてマークします。インターフェイスは、型の必要なメンバーを指定します。インターフェイスを実装するクラスはすべて、インターフェイスのプロトタイプで定義されているすべてのメソッドとプロパティを実装する必要があります。 @implementsを参照してください。",lends:"オブジェクトリテラルのキーを他のオブジェクトのプロパティとして扱う必要があることを示します。この注釈は、オブジェクトリテラルにのみ表示されます。",param:"メソッド、関数、およびコンストラクター定義とともに使用して、関数引数のタイプを指定します。",return:"メソッドおよび関数定義の戻りタイプを指定します。 @returnタグの後には、型式を続ける必要があります。",template:"ジェネリック型を参照してください。",this:"これが関数内で参照するキーワードが参照するオブジェクトのタイプを指定します。 @thisタグの後には、型式を続ける必要があります。",type:"変数、プロパティ、または式のタイプを識別します。 @typeタグの後には、型式を続ける必要があります。 2番目の例のように、型注釈をインラインで記述し、@ typeを省略することもできます。",typedef:"複合型（共用体、レコード型を含む）には、typedefを使用して、利便性と保守性のためにエイリアスを付けることができます。これらの注釈は長くなる場合がありますが、読みやすくするために複数行に分割できます。",deprecated:"マークされた関数、メソッド、またはプロパティを使用しないよう警告します。非推奨のメソッドを使用すると、コンパイラの警告が生成されます。",final:"クラスでは、このクラスの拡張が許可されていないことを示します。メソッドの場合、そのメソッドをオーバーライドできるサブクラスがないことを示します。",package:"メンバーまたはプロパティをパッケージプライベートとしてマークします。同じパッケージ内のコードのみが、@ packageとマークされた名前にアクセスできます。特に、親ディレクトリと子ディレクトリのコードは、@ packageとマークされた名前にアクセスできません。",public:"メンバーまたはプロパティがパブリックであることを示します。 @publicとマークされたプロパティは、anyファイル内のすべてのコードにアクセスできます。これは暗黙的なデフォルトであり、めったに使用されません。これは、難読化ビルドで名前を保持する必要があることを示すために使用されません。@ exportを参照してください。",private:"メンバーをプライベートとしてマークします。同じファイル内のコードだけが、@ privateとマークされたグローバル変数と関数にアクセスできます。 @privateとマークされたコンストラクターは、同じファイル内のコードと、それらの静的メンバーおよびインスタンスメンバーによってのみインスタンス化できます。",protected:"メンバーまたはプロパティが保護されていることを示します。 @protectedとマークされたプロパティは、以下にアクセスできます。",const:"変数を読み取り専用としてマークします。コンパイラーはJavaScriptコードを最適化する@const変数をインライン化できます。",dict:"@dictは、可変数のプロパティを持つオブジェクトを作成するために使用されます。コンストラクター（この例ではFoo）に@dictの注釈が付けられている場合、ブラケット表記のみを使用してFooオブジェクトのプロパティにアクセスできます。注釈は、オブジェクトリテラルで直接使用することもできます。",implicitCast:"この注釈は、externsプロパティ宣言でのみ使用できます。プロパティには宣言された型がありますが、警告なしに任意の型を割り当てることができます。プロパティにアクセスすると、宣言された型の値が返されます。たとえば、element.innerHTMLには任意のタイプを割り当てることができますが、常に文字列を返します。",inheritDoc:"サブクラスのメソッドまたはプロパティがスーパークラスのメソッドまたはプロパティを意図的に非表示にし、まったく同じドキュメントを持っていることを示します。 @inheritDocタグは@overrideタグを意味することに注意してください。@ overrideが推奨されます。",override:"メソッドまたはプロパティがクラスによって実装されたインターフェイスの一部であること、またはスーパークラスのメソッドまたはプロパティを意図的に非表示にすることを示します。他の注釈が含まれていない場合、メソッドまたはプロパティはそのスーパークラスから注釈を自動的に継承します。",polymer:"クラスにPolymerのセマンティクスがあることを示します。 --polymer_pass = 2フラグが指定されている場合にのみコンパイラに影響します。 Polymer PassがPolymerクラスを認識し、適切なタイプ情報を追加できるようにします。",polymerBehavior:"グローバルオブジェクトがPolymerの動作として使用できることを示します。 Polymer Passが動作を認識し、タイプ情報を使用中のPolymer定義にコピーできるようにします。 Behaviorオブジェクトはグローバルである必要があります。",struct:"@structは、固定数のプロパティを持つオブジェクトを作成するために使用されます。コンストラクター（この例ではFoo）に@structの注釈が付けられている場合、ドット表記を使用して、ブラケット表記ではなくFooオブジェクトのプロパティにアクセスできます。また、Fooインスタンスが作成された後は、Fooインスタンスにプロパティを追加することはできません。注釈は、オブジェクトリテラルで直接使用することもできます。",suppress:"警告を抑制します。警告カテゴリは|で区切られていますまたは、。警告名のリストについては、警告をご覧ください。",unrestricted:"クラスが@structタイプでも@dictタイプでもないことを示します。これは、@ constructor関数で作成された古いClosureスタイルのクラスのデフォルトです。 goog.defineClassとESクラスキーワードの両方がデフォルトで@structであるクラスを生成するため、@ unrestrictedと明示的にラベル付けする必要があります。",define:"コンパイル時にコンパイラーによってオーバーライドできる定数を示します。左側の例では、フラグ--define = 'ENABLE_DEBUG = false'をコンパイラーに渡して、ENABLE_DEBUGの値をfalseに変更できます。 定義された定数のタイプは、数値、文字列、またはブール値です。定義はグローバルスコープでのみ許可されます。",export:"プロパティが@exportでマークされ、コンパイラが--generate_exportsフラグを使用して実行されると、対応するgoog.exportSymbolステートメントが生成されます。",externs:"externsファイルを宣言します。",fileoverview:"コメントブロックに抑制を含むファイルレベルの情報を提供させます。",license:"マークされたファイルのコンパイル済みコードの前に関連コメントを挿入するようコンパイラーに指示します。この注釈により、重要な通知（法的ライセンスや著作権テキストなど）を変更せずにコンパイルして存続させることができます。改行は保持されます。",noalias:"externsファイルで使用され、変数または関数にコンパイラの「エイリアス外部」パスの一部としてエイリアスを設定してはならないことをコンパイラに示します。これはデフォルトでは有効ではなく、Java APIを通じてのみ使用できます。",nocompile:"ファイルの先頭で使用され、このファイルを解析するがコンパイルしないようコンパイラーに指示します。コンパイル用ではなく、コンパイルテストから除外する必要があるコード（ブートストラップコードなど）は、この注釈を使用します。ほとんどのコードでは、@ defineなどの他の手段を使用して動作を変更する必要があります。",nocollapse:"コンパイラーによって変数に縮小されるべきではないプロパティを示します。 @nocollapseの主な用途は、変更可能なプロパティのエクスポートを可能にすることです。折りたたまれていないプロパティは、コンパイラによって名前を変更できることに注意してください。オブジェクトであるプロパティに@nocollapseで注釈を付けると、そのすべてのプロパティも折りたたまれないままになります。",noinline:"（実験的）最適化によってインライン化されるべきではない関数または変数を示します。",nosideeffects:"@nosideeffectsは、宣言された関数の呼び出しに副作用がないことを示します。この注釈により、コンパイラは、戻り値が使用されない場合に関数の呼び出しを削除できます。これは、関数が「純粋」であることを示す信号ではありません。変更可能なグローバル状態を読み取る可能性があります。",throws:"関数によってスローされた例外を文書化するために使用されます。タイプチェッカーは現在この情報を使用していません。これは、externsファイルで宣言された関数に副作用があるかどうかを判断するためにのみ使用されます。",abstract:"@abstract JsDocをサポートし、それを使用して抽象クラスとメソッドのセマンティクスのコンパイル時チェックを支援することは、長い間Closure Compilerへの機能要求でした。この機能は、TypeScriptなどの他の一部のJavaScriptオプション型システムにも存在します。 Closure Compilerは、2016年に型システムレベルでのクラスとメソッドに対する@abstractのサポートを追加しました。新しいJavaScriptコードの場合、@ ogs.abstractMethodを優先して@abstract JsDocを使用する必要があります。"},inlineDocs:{}},ko:{blockDocs:{constructor:"함수를 생성자로 표시합니다. 컴파일러에는 new 키워드와 함께 사용되는 모든 함수에 대해 @constructor 주석이 필요합니다. @constructor는 EcmaScript 클래스 생성자 메서드 및 goog.defineClass 생성자 메서드에서 생략되어야합니다.",enum:"특정 유한 수의 가능한 값 (종종 문자열 또는 숫자)이있는 유형 인 열거 형을 지정합니다. @enum 태그 다음에는 유형 표현식이 와야합니다. 열거 형의 유형이 생략되면 숫자로 간주됩니다.",extends:"클래스 또는 인터페이스를 다른 클래스에서 상속하는 것으로 표시합니다. @extends로 표시된 클래스는 @constructor, @interface 또는 @record로도 표시되어야합니다.",implements:"@constructor와 함께 사용하여 클래스가 인터페이스를 구현 함을 나타냅니다.",interface:"함수를 인터페이스로 표시합니다. 인터페이스는 유형의 필수 멤버를 지정합니다. 인터페이스를 구현하는 모든 클래스는 인터페이스의 프로토 타입에 정의 된 모든 메서드와 속성을 구현해야합니다. @implements를 참조하십시오.",lends:"객체 리터럴의 키가 다른 객체의 속성으로 처리되어야 함을 나타냅니다. 이 주석은 객체 리터럴에만 나타나야합니다.",param:"함수 인수의 유형을 지정하기 위해 메서드, 함수 및 생성자 정의와 함께 사용됩니다.",return:"메서드 및 함수 정의의 반환 유형을 지정합니다. @return 태그 다음에는 유형 표현식이 와야합니다.",template:"일반 유형을 참조하십시오.",this:"함수 내에서 this 키워드가 참조하는 객체의 유형을 지정합니다. @this 태그 다음에는 유형 표현식이 와야합니다.",type:"변수, 속성 또는 식의 유형을 식별합니다. @type 태그 다음에는 유형 표현식이 와야합니다. 두 번째 예제 에서처럼 유형 주석을 인라인으로 작성하고 @type을 생략 할 수도 있습니다.",typedef:"복합 유형 (유합 및 레코드 유형 포함)은 typedef를 사용하여 편의성과 유지 보수성을 위해 별칭을 지정할 수 있습니다. 이러한 주석은 길 수 있지만 가독성을 위해 여러 줄로 분할 할 수 있습니다.",deprecated:"표시된 함수, 메서드 또는 속성을 사용하지 않도록 경고합니다. 더 이상 사용되지 않는 메서드를 사용하면 컴파일러 경고가 생성됩니다.",final:"클래스에서이 클래스를 확장 할 수 없음을 나타냅니다. 메서드에서 해당 메서드를 재정의 할 수있는 하위 클래스가 없음을 나타냅니다.",package:"구성원 또는 속성을 패키지 전용으로 표시합니다. 동일한 디렉토리의 코드 만 @package로 표시된 이름에 액세스 할 수 있습니다. 특히 상위 및 하위 디렉터리의 코드는 @package로 표시된 이름에 액세스 할 수 없습니다.",public:"멤버 또는 속성이 공용임을 나타냅니다. @public으로 표시된 속성은 모든 파일의 모든 코드에 액세스 할 수 있습니다. 이것은 암시 적 기본값이며 거의 사용되지 않습니다. 이것은 난독 화 빌드에서 이름이 보존되어야 함을 나타내는 데 사용되지 않습니다. @export를 참조하십시오.",private:"구성원을 비공개로 표시합니다. 동일한 파일의 코드 만 @private로 표시된 전역 변수 및 함수에 액세스 할 수 있습니다. @private로 표시된 생성자는 동일한 파일의 코드와 해당 정적 및 인스턴스 멤버에 의해서만 인스턴스화 될 수 있습니다.",protected:"구성원 또는 속성이 보호됨을 나타냅니다. @protected로 표시된 속성은 다음에 액세스 할 수 있습니다.",const:"변수를 읽기 전용으로 표시합니다. 컴파일러는 JavaScript 코드를 최적화하는 @const 변수를 인라인 할 수 있습니다.",dict:"@dict는 다양한 수의 속성을 가진 개체를 만드는 데 사용됩니다. 생성자 (예제에서는 Foo)에 @dict로 주석을 달면 대괄호 표기법 만 사용하여 Foo 객체의 속성에 액세스 할 수 있습니다. 주석은 객체 리터럴에서 직접 사용할 수도 있습니다.",implicitCast:"이 주석은 externs 속성 선언에만 나타날 수 있습니다. 속성에 선언 된 유형이 있지만 경고없이 모든 유형을 할당 할 수 있습니다. 속성에 액세스하면 선언 된 유형의 값이 반환됩니다. 예를 들어 element.innerHTML은 모든 유형에 할당 될 수 있지만 항상 문자열을 반환합니다.",inheritDoc:"하위 클래스의 메서드 또는 속성이 슈퍼 클래스의 메서드 또는 속성을 의도적으로 숨기고 정확히 동일한 설명서를 포함 함을 나타냅니다. @inheritDoc 태그는 @override 태그를 의미하며 @override가 선호됩니다.",override:"메서드 또는 속성이 클래스에 의해 구현 된 인터페이스의 일부이거나 수퍼 클래스의 메서드 또는 속성을 의도적으로 숨긴다는 것을 나타냅니다. 다른 주석이 포함되지 않은 경우 메서드 또는 속성은 수퍼 클래스에서 주석을 자동으로 상속합니다.",polymer:"클래스에 Polymer 의미가 있음을 나타냅니다. --polymer_pass = 2 플래그가 지정된 경우에만 컴파일러에 영향을줍니다. Polymer Pass가 Polymer 클래스를 인식하고 적절한 유형 정보를 추가 할 수 있도록합니다.",polymerBehavior:"전역 개체를 Polymer 동작으로 사용할 수 있음을 나타냅니다. Polymer Pass가 동작을 인식하고 사용하는 Polymer 정의에 유형 정보를 복사 할 수 있습니다. 동작 개체는 전역이어야합니다.",struct:"@struct는 고정 된 수의 속성을 가진 개체를 만드는 데 사용됩니다. 생성자 (예제에서는 Foo)에 @struct로 주석을 달면 점 표기법을 사용하여 대괄호 표기법이 아닌 Foo 객체의 속성에 액세스 할 수 있습니다. 또한 Foo 인스턴스가 생성 된 후에는 속성을 추가 할 수 없습니다. 주석은 객체 리터럴에서 직접 사용할 수도 있습니다.",suppress:"경고를 억제합니다. 경고 범주는 | 또는,. 경고 이름 목록은 경고를 참조하십시오.",unrestricted:"클래스가 @struct 유형도 @dict 유형도 아님을 나타냅니다. @constructor 함수로 생성 된 이전 Closure 스타일 클래스의 기본값입니다. goog.defineClass와 ES class 키워드는 모두 기본적으로 @struct 인 클래스를 생성하므로 명시 적으로 @unrestricted라는 레이블을 지정해야합니다.",define:"컴파일 타임에 컴파일러가 재정의 할 수있는 상수를 나타냅니다. 왼쪽의 예를 사용하면 --define = 'ENABLE_DEBUG = false'플래그를 컴파일러에 전달하여 ENABLE_DEBUG 값을 false로 변경할 수 있습니다. 정의 된 상수의 유형은 숫자, 문자열 또는 부울 일 수 있습니다. 정의는 전역 범위에서만 허용됩니다.",export:"속성이 @export로 표시되고 컴파일러가 --generate_exports 플래그로 실행되면 해당하는 goog.exportSymbol 문이 생성됩니다.",externs:"externs 파일을 선언합니다.",fileoverview:"주석 블록이 억제를 포함한 파일 레벨 정보를 제공하도록합니다.",license:"표시된 파일에 대해 컴파일 된 코드 앞에 관련 주석을 삽입하도록 컴파일러에 지시합니다. 이 주석을 사용하면 법적 라이센스 또는 저작권 텍스트와 같은 중요한 고지 사항이 변경되지 않은 상태로 컴파일 될 수 있습니다. 줄 바꿈이 유지됩니다.",noalias:'externs 파일에서 변수 또는 함수가 컴파일러의 \\"별칭 외부\\"패스의 일부로 별칭이 지정되지 않아야 함을 컴파일러에 표시하는 데 사용되며 기본적으로 활성화되지 않으며 Java API를 통해서만 사용할 수 있습니다.',nocompile:"컴파일러에게이 파일을 구문 분석하되 컴파일하지는 않도록 지시하기 위해 파일 맨 위에 사용됩니다. 컴파일 용이 아니고 컴파일 테스트에서 생략해야하는 코드 (예 : 부트 스트랩 코드)는이 주석을 사용합니다. 대부분의 코드는 @define과 같은 다른 수단을 사용하여 동작을 변경해야합니다.",nocollapse:"컴파일러에 의해 변수로 축소되지 않아야하는 속성을 나타냅니다. @nocollapse의 주된 용도는 변경 가능한 속성의 내보내기를 허용하는 것입니다. 축소되지 않은 속성은 컴파일러에서 계속 이름을 바꿀 수 있습니다. @nocollapse를 사용하여 객체 인 속성에 주석을 달면 모든 속성도 축소되지 않은 상태로 유지됩니다.",noinline:"(실험적) 최적화에 의해 인라인되지 않아야하는 함수 또는 변수를 나타냅니다.",nosideeffects:'@nosideeffects는 선언 된 함수에 대한 호출에 부작용이 없음을 나타냅니다. 이 주석을 통해 컴파일러는 반환 값이 사용되지 않는 경우 함수 호출을 제거 할 수 있습니다. 이것은 함수가 \\"순수\\"라는 신호가 아닙니다. 여전히 가변 글로벌 상태를 읽을 수 있습니다.',throws:"함수에서 발생한 예외를 문서화하는 데 사용됩니다. 유형 검사기는 현재이 정보를 사용하지 않습니다. externs 파일에 선언 된 함수에 부작용이 있는지 확인하는 데만 사용됩니다.",abstract:"@abstract JsDoc을 지원하고이를 사용하여 추상 클래스 및 메서드의 의미론에 대한 컴파일 타임 검사를 지원하는 것은 오랫동안 Closure Compiler에 대한 기능 요청이었습니다. 이 기능은 TypeScript와 같은 다른 JavaScript 선택적 유형 시스템에도 있습니다. Closure Compiler는 2016 년에 유형 시스템 수준에서 클래스 및 메서드에 대한 @abstract 지원을 추가했습니다. 새 JavaScript 코드의 경우 goog.abstractMethod 대신 @abstract JsDoc을 사용해야합니다."},inlineDocs:{}},pl:{blockDocs:{constructor:"Zaznacza funkcję jako konstruktor. Kompilator wymaga adnotacji @constructor dla każdej funkcji, która jest używana z nowym słowem kluczowym. @konstruktor należy pominąć w metodach konstruktora klasy EcmaScript i metodach konstruktora goog.defineClass.",enum:"Określa wyliczenie, które jest typem z określoną, skończoną liczbą możliwych wartości, często łańcuchami lub liczbami. Po tagu @enum musi następować wyrażenie typu. Jeśli typ wyliczenia zostanie pominięty, przyjmuje się liczbę.",extends:"Oznacza klasę lub interfejs jako dziedziczący z innej klasy. Klasa oznaczona @extends musi być również oznaczona @constructor, @interface lub @record.",implements:"Używany z @constructor do wskazania, że ​​klasa implementuje interfejs.",interface:"Oznacza funkcję jako interfejs. Interfejs określa wymagane elementy członkowskie typu. Każda klasa, która implementuje interfejs, musi implementować wszystkie metody i właściwości zdefiniowane w prototypie interfejsu. Zobacz @implements.",lends:"Wskazuje, że klucze literału obiektu powinny być traktowane jako właściwości innego obiektu. Ta adnotacja powinna pojawiać się tylko w literałach obiektów.",param:"Używany z definicjami metod, funkcji i konstruktorów w celu określenia typów argumentów funkcji.",return:"Określa zwracane typy metod i definicji funkcji. Po tagu @return musi następować wyrażenie typu.",template:"Zobacz typy ogólne.",this:"Określa typ obiektu, do którego odnosi się słowo kluczowe this w funkcji. Po tagu @this musi następować wyrażenie typu.",type:"Identyfikuje typ zmiennej, właściwości lub wyrażenia. Po tagu @type musi następować wyrażenie typu. Możesz również wpisać adnotację typu w tekście i pominąć @type, jak w drugim przykładzie.",typedef:"Typy złożone (w tym związki i typy rekordów) mogą być aliasowane dla wygody i łatwości konserwacji przy użyciu definicji typu. Te adnotacje mogą być długie, ale w celu zwiększenia czytelności można je podzielić na wiele wierszy.",deprecated:"Ostrzega przed użyciem zaznaczonej funkcji, metody lub właściwości. Użycie przestarzałej metody powoduje wyświetlenie ostrzeżenia kompilatora.",final:"Na klasie wskazuje, że nie można rozszerzyć tej klasy. W metodzie wskazuje, że żadna podklasa nie może przesłonić tej metody.",package:"Oznacza członka lub właściwość jako pakiet prywatny. Tylko kod w tym samym katalogu może uzyskać dostęp do nazw oznaczonych @package. W szczególności kod w katalogach nadrzędnych i podrzędnych nie może uzyskać dostępu do nazw oznaczonych @package.",public:"Wskazuje, że członek lub właściwość jest publiczna. Właściwość oznaczona @public jest dostępna dla całego kodu w dowolnym pliku. Jest to domniemana wartość domyślna i rzadko używana. Nie jest to używane do wskazania, że ​​nazwa powinna zostać zachowana w zaciemniających kompilacjach, patrz @export.",private:"Oznacza członka jako prywatnego. Tylko kod w tym samym pliku może uzyskać dostęp do zmiennych globalnych i funkcji oznaczonych @private. Konstruktory oznaczone @private mogą być tworzone tylko przez kod w tym samym pliku oraz przez ich elementy statyczne i instancyjne.",protected:"Wskazuje, że członek lub właściwość jest chroniona. Właściwość oznaczona @chroniona jest dostępna dla:",const:"Oznacza zmienną jako tylko do odczytu. Kompilator może wbudować zmienne @const, które optymalizują kod JavaScript.",dict:"@dict służy do tworzenia obiektów o zmiennej liczbie właściwości. Gdy konstruktor (w przykładzie Foo) jest opatrzony adnotacją @dict, możesz użyć notacji nawiasowej tylko do uzyskania dostępu do właściwości obiektów Foo. Adnotacji można również używać bezpośrednio w literałach obiektów.",implicitCast:"Ta adnotacja może pojawić się tylko w deklaracjach właściwości externs. Właściwość ma zadeklarowany typ, ale można przypisać do niej dowolny typ bez ostrzeżenia. Podczas uzyskiwania dostępu do właściwości odzyskujesz wartość zadeklarowanego typu. Na przykład element.innerHTML można przypisać dowolny typ, ale zawsze zwraca ciąg.",inheritDoc:"Wskazuje, że metoda lub właściwość podklasy celowo ukrywa metodę lub właściwość nadklasy i ma dokładnie taką samą dokumentację. Zauważ, że tag @inheritDoc implikuje tag @override, preferowany jest @override.",override:"Wskazuje, że metoda lub właściwość jest częścią interfejsu zaimplementowanego przez klasę lub celowo ukrywa metodę lub właściwość nadklasy. Jeśli żadne inne adnotacje nie są dołączone, metoda lub właściwość automatycznie dziedziczy adnotacje ze swojej nadklasy.",polymer:"Wskazuje, że klasa ma semantykę Polymer. Wpływa tylko na kompilator, gdy określono flagę --polymer_pass = 2. Umożliwia Polymer Pass rozpoznanie klas polimerów i dodanie odpowiednich informacji o typie.",polymerBehavior:"Wskazuje, że obiekt globalny może być używany jako zachowanie polimeru. Pozwala Polymer Pass na rozpoznawanie zachowań i kopiowanie informacji o typie do używającej definicji polimeru. Obiekty zachowań muszą być globalne.",struct:"@struct służy do tworzenia obiektów o ustalonej liczbie właściwości. Kiedy konstruktor (w tym przykładzie Foo) jest opatrzony adnotacją @struct, do dostępu do właściwości obiektów Foo można używać tylko notacji z kropką, a nie notacji nawiasów. Ponadto nie można dodać właściwości do instancji Foo po jej skonstruowaniu. Adnotacji można również używać bezpośrednio w literałach obiektów.",suppress:"Pomija ostrzeżenia. Kategorie ostrzeżeń są oddzielone znakiem | lub,. Aby zapoznać się z listą nazw ostrzeżeń, zobacz Ostrzeżenia.",unrestricted:"Wskazuje, że klasa nie jest typem @struct ani @dict. Jest to domyślne ustawienie dla starych klas Closure utworzonych za pomocą funkcji @constructor. Zarówno goog.defineClass, jak i słowo kluczowe ES class tworzą klasy, które domyślnie są @struct, więc będą musiały być jawnie oznaczone jako @unrestricted.",define:"Wskazuje stałą, która może zostać zastąpiona przez kompilator w czasie kompilacji. W przykładzie po lewej możesz przekazać flagę --define = 'ENABLE_DEBUG = false' do kompilatora, aby zmienić wartość ENABLE_DEBUG na false. Typem zdefiniowanej stałej może być liczba, łańcuch lub wartość logiczna. Definicje są dozwolone tylko w zakresie globalnym.",export:"Gdy właściwości są oznaczone @export, a kompilator jest uruchamiany z flagą --generate_exports, zostanie wygenerowana odpowiednia instrukcja goog.exportSymbol:",externs:"Deklaruje plik externs.",fileoverview:"Sprawia, że ​​blok komentarza zawiera informacje na poziomie pliku, w tym pomijania.",license:"Nakazuje kompilatorowi wstawienie skojarzonego komentarza przed skompilowanym kodem dla zaznaczonego pliku. Ta adnotacja pozwala, aby ważne informacje (takie jak licencje prawne lub tekst dotyczący praw autorskich) przetrwały kompilację bez zmian. Podziały wierszy są zachowywane.",noalias:"Używany w pliku externs w celu wskazania kompilatorowi, że zmienna lub funkcja nie powinna mieć aliasu w ramach przebiegu „alias externals” kompilatora, nie jest domyślnie włączona i jest dostępna tylko za pośrednictwem interfejsu API języka Java.",nocompile:"Używany na początku pliku, aby powiedzieć kompilatorowi, aby przeanalizował ten plik, ale go nie kompilował. Kod, który nie jest przeznaczony do kompilacji i powinien być pominięty w testach kompilacji (taki jak kod bootstrap), używa tej adnotacji. Większość kodu powinna używać innych środków, takich jak @define, aby zmienić zachowanie.",nocollapse:"Oznacza właściwość, która nie powinna zostać zwinięta przez kompilator do zmiennej. Głównym zastosowaniem @nocollapse jest umożliwienie eksportowania zmiennych właściwości. Należy zauważyć, że kompilator nadal może zmienić nazwy niezwiniętych właściwości. Jeśli oznaczysz właściwość, która jest obiektem, @nocollapse, wszystkie jej właściwości również pozostaną niezwinięte.",noinline:"(EKSPERYMENTALNE) Oznacza funkcję lub zmienną, która nie powinna być wstawiana przez optymalizacje.",nosideeffects:"@nosideeffects wskazuje, że wywołanie zadeklarowanej funkcji nie ma żadnych skutków ubocznych. Ta adnotacja umożliwia kompilatorowi usuwanie wywołań funkcji, jeśli wartość zwracana nie jest używana. To nie jest sygnał, że funkcja jest „czysta”: nadal może odczytywać zmienny stan globalny.",throws:"Służy do dokumentowania wyjątków generowanych przez funkcję. Moduł sprawdzania typu obecnie nie korzysta z tych informacji. Służy tylko do ustalenia, czy funkcja zadeklarowana w pliku externs ma skutki uboczne.",abstract:"Obsługa @abstract JsDoc i używanie jej do sprawdzania semantyki klas abstrakcyjnych i metod w czasie kompilacji było przez długi czas żądaniem funkcji dla Closure Compiler. Ta funkcja jest również obecna w niektórych innych opcjonalnych systemach typu JavaScript, takich jak TypeScript. Closure Compiler dodał obsługę @abstract w klasach i metodach na poziomie systemu typów w 2016 r. W przypadku nowego kodu JavaScript należy użyć @abstract JsDoc zamiast goog.abstractMethod."},inlineDocs:{}},"pt-br":{blockDocs:{constructor:"Marca uma função como construtor. O compilador requer uma anotação @constructor para qualquer função usada com a nova palavra-chave. @constructor deve ser omitido dos métodos do construtor da classe EcmaScript e dos métodos do construtor goog.defineClass.",enum:"Especifica um enum, que é um tipo com um número finito específico de valores possíveis, geralmente strings ou números. A tag @enum deve ser seguida por uma expressão de tipo. Se o tipo de enum for omitido, o número será assumido.",extends:"Marca uma classe ou interface como herdeira de outra classe. Uma classe marcada com @extends também deve ser marcada com @constructor, @interface ou @record.",implements:"Usado com @constructor para indicar que uma classe implementa uma interface.",interface:"Marca uma função como interface. Uma interface especifica os membros necessários de um tipo. Qualquer classe que implementa uma interface deve implementar todos os métodos e propriedades definidos no protótipo da interface. Veja @implements.",lends:"Indica que as chaves de um literal de objeto devem ser tratadas como propriedades de algum outro objeto. Esta anotação deve aparecer apenas em literais de objeto.",param:"Usado com definições de método, função e construtor para especificar os tipos de argumentos de função.",return:"Especifica os tipos de retorno de definições de método e função. A tag @return deve ser seguida por uma expressão de tipo.",template:"Consulte Tipos genéricos.",this:"Especifica o tipo de objeto ao qual a palavra-chave this se refere em uma função. A tag @this deve ser seguida por uma expressão de tipo.",type:"Identifica o tipo de uma variável, propriedade ou expressão. A tag @type deve ser seguida por uma expressão de tipo. Você também pode escrever a anotação de tipo embutida e omitir @type, como no segundo exemplo.",typedef:"Tipos complexos (incluindo uniões e tipos de registro) podem ter um alias para conveniência e facilidade de manutenção usando um typedef. Essas anotações podem ser longas, mas podem ser divididas em várias linhas para facilitar a leitura.",deprecated:"Avisa contra o uso da função, método ou propriedade marcada não deve ser usado. Usar um método obsoleto produz um aviso do compilador.",final:"Em uma classe, indica que essa classe não pode ser estendida. Em um método, indica que nenhuma subclasse tem permissão para substituir esse método.",package:"Marca um membro ou propriedade como um pacote privado. Apenas o código no mesmo diretório pode acessar nomes marcados com @package. Em particular, o código nos diretórios pai e filho não pode acessar nomes marcados com @package.",public:"Indica que um membro ou propriedade é público. Uma propriedade marcada como @public pode ser acessada por todos os códigos de qualquer arquivo. Este é o padrão implícito e raramente usado. Isso não é usado para indicar que o nome deve ser preservado em construções ofuscantes, consulte @export.",private:"Marca um membro como privado. Apenas o código no mesmo arquivo pode acessar variáveis ​​globais e funções marcadas com @private. Construtores marcados com @private só podem ser instanciados por código no mesmo arquivo e por seus membros estáticos e de instância.",protected:"Indica que um membro ou propriedade está protegido. Uma propriedade marcada como @protected pode ser acessada por:",const:"Marca uma variável como somente leitura. O compilador pode incorporar variáveis ​​@const, o que otimiza o código JavaScript.",dict:"@dict é usado para criar objetos com um número variável de propriedades. Quando um construtor (Foo no exemplo) é anotado com @dict, você só pode usar a notação de colchetes para acessar as propriedades dos objetos Foo. A anotação também pode ser usada diretamente em literais de objeto.",implicitCast:"Esta anotação só pode aparecer em declarações de propriedades externas. A propriedade tem um tipo declarado, mas você pode atribuir qualquer tipo a ela sem aviso. Ao acessar a propriedade, você obtém um valor do tipo declarado. Por exemplo, element.innerHTML pode ser atribuído a qualquer tipo, mas sempre retornará uma string.",inheritDoc:"Indica que um método ou propriedade de uma subclasse oculta intencionalmente um método ou propriedade da superclasse e possui exatamente a mesma documentação. Observe que a tag @inheritDoc implica na tag @override, @override é o preferido.",override:"Indica que um método ou propriedade faz parte de uma interface implementada pela classe ou oculta intencionalmente um método ou propriedade da superclasse. Se nenhuma outra anotação for incluída, o método ou propriedade herda automaticamente as anotações de sua superclasse.",polymer:"Indica que uma classe tem semântica de polímero. Afeta apenas o compilador quando o sinalizador --polymer_pass = 2 é especificado. Permite que o Polymer Pass reconheça as classes do Polymer e adicione informações de tipo apropriadas.",polymerBehavior:"Indica que um objeto global pode ser usado como um comportamento de polímero. Permite que o Polymer Pass reconheça comportamentos e copie informações de tipo para a definição do Polymer usando. Os objetos de comportamento devem ser globais.",struct:"@struct é usado para criar objetos com um número fixo de propriedades. Quando um construtor (Foo no exemplo) é anotado com @struct, você só pode usar a notação de ponto para acessar as propriedades dos objetos Foo, não a notação de colchetes. Além disso, você não pode adicionar uma propriedade a uma instância de Foo após sua construção. A anotação também pode ser usada diretamente em literais de objeto.",suppress:"Suprime os avisos. As categorias de aviso são separadas por | ou,. Para obter uma lista de nomes de avisos, dê uma olhada em Avisos.",unrestricted:"Indica que uma classe não é do tipo @struct nem do tipo @dict. Este é o padrão para as antigas classes de estilo Closure criadas com uma função @constructor. Goog.defineClass e a palavra-chave ES class produzem classes que são @struct por padrão, portanto, precisam ser explicitamente rotuladas como @unrestricted.",define:"Indica uma constante que pode ser substituída pelo compilador em tempo de compilação. Com o exemplo à esquerda, você pode passar o sinalizador --define = 'ENABLE_DEBUG = false' para o compilador para alterar o valor de ENABLE_DEBUG para false. O tipo de uma constante definida pode ser número, string ou booleano. As definições são permitidas apenas no escopo global.",export:"Quando as propriedades são marcadas com @export e o compilador é executado com a sinalização --generate_exports, uma instrução goog.exportSymbol correspondente é gerada:",externs:"Declara um arquivo externo.",fileoverview:"Faz com que o bloco de comentário forneça informações de nível de arquivo, incluindo supressões.",license:"Diz ao compilador para inserir o comentário associado antes do código compilado para o arquivo marcado. Esta anotação permite que avisos importantes (como licenças legais ou texto de copyright) sobrevivam à compilação inalterados. As quebras de linha são preservadas.",noalias:'Usado em um arquivo externo para indicar ao compilador que a variável ou função não deve receber um alias como parte da passagem \\"alias externos\\" do compilador, não é habilitado por padrão e está disponível apenas por meio da API Java.',nocompile:"Usado no início de um arquivo para dizer ao compilador para analisar este arquivo, mas não compilá-lo. O código que não se destina à compilação e deve ser omitido dos testes de compilação (como o código de bootstrap) usa esta anotação. A maioria dos códigos deve usar outros meios, como @define, para alterar o comportamento.",nocollapse:"Denota uma propriedade que não deve ser reduzida pelo compilador em uma variável. O principal uso do @nocollapse é permitir a exportação de propriedades mutáveis. Observe que as propriedades não recolhidas ainda podem ser renomeadas pelo compilador. Se você anotar uma propriedade que é um objeto com @nocollapse, todas as suas propriedades também permanecerão não recolhidas.",noinline:"(EXPERIMENTAL) Denota uma função ou variável que não deve ser embutida nas otimizações.",nosideeffects:'@nosideeffects indica que uma chamada para a função declarada não tem efeitos colaterais. Essa anotação permite que o compilador remova chamadas para a função se o valor de retorno não for usado. Isso não é um sinal de que a função é \\"pura\\": ela ainda pode ler o estado global mutável.',throws:"Usado para documentar as exceções lançadas por uma função. O verificador de tipo não usa essas informações no momento. Só é usado para descobrir se uma função declarada em um arquivo externo tem efeitos colaterais.",abstract:"Apoiar o JsDoc @abstract e usá-lo para ajudar nas verificações de tempo de compilação na semântica de classes e métodos abstratos foi uma solicitação de recurso para o Closure Compiler por um longo tempo. Este recurso também está presente em alguns outros sistemas de tipos opcionais de JavaScript, como o TypeScript. O Closure Compiler adicionou suporte para @abstract em classes e métodos no nível de sistema de tipo em 2016. Para o novo código JavaScript, o @abstract JsDoc deve ser usado em favor de goog.abstractMethod."},inlineDocs:{}},ru:{blockDocs:{constructor:"Отмечает функцию как конструктор. Компилятору требуется аннотация @constructor для любой функции, которая используется с ключевым словом new. @constructor следует исключить из методов конструктора класса EcmaScript и методов конструктора goog.defineClass.",enum:"Задает перечисление, которое представляет собой тип с определенным конечным числом возможных значений, часто строк или чисел. За тегом @enum должно следовать выражение типа. Если тип перечисления опущен, предполагается число.",extends:"Помечает класс или интерфейс как наследующий от другого класса. Класс, помеченный @extends, также должен быть помечен либо @constructor, @interface, либо @record.",implements:"Используется с @constructor, чтобы указать, что класс реализует интерфейс.",interface:"Отмечает функцию как интерфейс. Интерфейс определяет необходимые члены типа. Любой класс, реализующий интерфейс, должен реализовывать все методы и свойства, определенные в прототипе интерфейса. См. @Implements.",lends:"Указывает, что ключи литерала объекта следует рассматривать как свойства какого-либо другого объекта. Эта аннотация должна появляться только в объектных литералах.",param:"Используется с определениями методов, функций и конструкторов для указания типов аргументов функции.",return:"Задает типы возвращаемых определений методов и функций. За тегом @return должно следовать выражение типа.",template:"См. Общие типы.",this:"Задает тип объекта, к которому ключевое слово this относится в функции. За тегом @this должно следовать выражение типа.",type:"Определяет тип переменной, свойства или выражения. За тегом @type должно следовать выражение типа. Вы также можете написать аннотацию типа inline и опустить @type, как во втором примере.",typedef:"Сложные типы (включая объединения и типы записей) могут иметь псевдонимы для удобства и удобства сопровождения с помощью typedef. Эти аннотации могут быть длинными, но для удобства чтения их можно разбить на несколько строк.",deprecated:"Предупреждает о недопустимости использования отмеченной функции, метода или свойства. Использование устаревшего метода вызывает предупреждение компилятора.",final:"В классе указывает, что этот класс не может быть расширен. В методе указывает, что подклассу не разрешено переопределять этот метод.",package:"Помечает член или свойство как частный пакет. Только код в том же каталоге может получить доступ к именам, помеченным @package. В частности, код в родительском и дочернем каталогах не может получить доступ к именам, помеченным @package.",public:"Указывает, что член или свойство являются общедоступными. Свойство с пометкой @public доступно для всего кода в любом файле. Это неявное значение по умолчанию, которое используется редко. Это не используется, чтобы указать, что имя должно быть сохранено в сборках с обфускацией, см. @Export.",private:"Отмечает участника как закрытый. Только код в том же файле может получить доступ к глобальным переменным и функциям, помеченным @private. Конструкторы, отмеченные @private, могут быть созданы только кодом в том же файле и их статическими членами и членами экземпляра.",protected:"Указывает, что член или свойство защищены. Свойство с пометкой @protected доступно для:",const:"Помечает переменную как доступную только для чтения. Компилятор может встраивать переменные @const, что оптимизирует код JavaScript.",dict:"@dict используется для создания объектов с переменным количеством свойств. Когда конструктор (Foo в примере) аннотирован с помощью @dict, вы можете использовать только скобки для доступа к свойствам объектов Foo. Аннотацию также можно использовать непосредственно для литералов объекта.",implicitCast:"Эта аннотация может появляться только в объявлениях свойств externs. Свойство имеет объявленный тип, но вы можете присвоить ему любой тип без предупреждения. При доступе к свойству вы получаете обратно значение объявленного типа. Например, element.innerHTML может иметь любой тип, но всегда будет возвращать строку.",inheritDoc:"Указывает, что метод или свойство подкласса намеренно скрывает метод или свойство суперкласса и имеет точно такую ​​же документацию. Обратите внимание, что тег @inheritDoc подразумевает тег @override, предпочтительнее @override.",override:"Указывает, что метод или свойство является частью интерфейса, реализованного классом, или намеренно скрывает метод или свойство суперкласса. Если другие аннотации не включены, метод или свойство автоматически наследует аннотации от своего суперкласса.",polymer:"Указывает, что класс имеет семантику Polymer. Влияет на компилятор, только если указан флаг --polymer_pass = 2. Позволяет программе Polymer Pass распознавать классы полимеров и добавлять соответствующую информацию о типах.",polymerBehavior:"Указывает, что глобальный объект можно использовать как поведение Polymer. Позволяет программе Polymer Pass распознавать поведение и копировать информацию о типе в используемое определение Polymer. Объекты поведения должны быть глобальными.",struct:"@struct используется для создания объектов с фиксированным количеством свойств. Когда конструктор (Foo в примере) аннотируется с помощью @struct, вы можете использовать только точечную нотацию для доступа к свойствам объектов Foo, а не скобку. Кроме того, вы не можете добавить свойство к экземпляру Foo после его создания. Аннотацию также можно использовать непосредственно для литералов объекта.",suppress:"Подавляет предупреждения. Категории предупреждений разделены знаком | или ,. Список названий предупреждений см. В разделе «Предупреждения».",unrestricted:"Указывает, что класс не является ни типом @struct, ни типом @dict. Это значение по умолчанию для старых классов в стиле Closure, созданных с помощью функции @constructor. И goog.defineClass, и ключевое слово ES class создают классы, которые по умолчанию имеют @struct, поэтому их необходимо явно пометить как @unrestricted.",define:"Указывает константу, которая может быть переопределена компилятором во время компиляции. В примере слева вы можете передать компилятору флаг --define = 'ENABLE_DEBUG = false', чтобы изменить значение ENABLE_DEBUG на false. Тип определенной константы может быть числовым, строковым или логическим. Определения разрешены только в глобальной области.",export:"Когда свойства отмечены @export и компилятор запускается с флагом --generate_exports, будет сгенерирован соответствующий оператор goog.exportSymbol:",externs:"Объявляет внешний файл.",fileoverview:"Заставляет блок комментариев предоставлять информацию на уровне файла, включая подавления.",license:"Указывает компилятору вставить связанный комментарий перед скомпилированным кодом для отмеченного файла. Эта аннотация позволяет важным уведомлениям (таким как юридические лицензии или текст об авторских правах) оставаться в неизменном виде при компиляции. Разрывы строк сохраняются.",noalias:"Используется в файле externs, чтобы указать компилятору, что переменная или функция не должны иметь псевдонима как часть прохода «alias externals» компилятора, не включена по умолчанию и доступна только через API Java.",nocompile:"Используется в верхней части файла, чтобы указать компилятору проанализировать этот файл, но не компилировать его. Код, который не предназначен для компиляции и который должен быть исключен из тестов компиляции (например, код начальной загрузки), использует эту аннотацию. В большинстве кодов для изменения поведения следует использовать другие средства, например @define.",nocollapse:"Обозначает свойство, которое не должно сворачиваться компилятором в переменную. Основное использование @nocollapse - разрешить экспорт изменяемых свойств. Обратите внимание, что несвернутые свойства все еще могут быть переименованы компилятором. Если вы аннотируете свойство, являющееся объектом, с помощью @nocollapse, все его свойства также останутся несвернутыми.",noinline:"(ЭКСПЕРИМЕНТАЛЬНАЯ ЧАСТЬ) Обозначает функцию или переменную, которые не должны быть встроены при оптимизации.",nosideeffects:"@nosideeffects указывает, что вызов объявленной функции не имеет побочных эффектов. Эта аннотация позволяет компилятору удалять вызовы функции, если возвращаемое значение не используется. Это не сигнал о том, что функция «чистая»: она все еще может считывать изменяемое глобальное состояние.",throws:"Используется для документирования исключений, создаваемых функцией. Средство проверки типов в настоящее время не использует эту информацию. Он используется только для того, чтобы выяснить, имеет ли функция, объявленная в файле externs, побочные эффекты.",abstract:"Поддержка @abstract JsDoc и использование этого документа для облегчения проверки семантики абстрактных классов и методов во время компиляции долгое время требовалось от Closure Compiler. Эта функция также присутствует в некоторых других системах необязательных типов JavaScript, таких как TypeScript. В 2016 году компилятор Closure добавил поддержку @abstract для классов и методов на уровне системы типов. Для нового кода JavaScript следует использовать @abstract JsDoc в пользу goog.abstractMethod."},inlineDocs:{}},tr:{blockDocs:{constructor:"Bir işlevi yapıcı olarak işaretler. Derleyici, new anahtar sözcüğüyle kullanılan herhangi bir işlev için bir @constructor ek açıklaması gerektirir. @constructor, EcmaScript sınıf yapıcı yöntemlerinden ve goog.defineClass yapıcı yöntemlerinden çıkarılmalıdır.",enum:"Belirli bir sonlu sayıda olası değere sahip bir tür olan, genellikle dizeler veya sayılar olan bir enum belirtir. @enum etiketinin ardından bir tür ifadesi gelmelidir. Bir numaralandırma türü ihmal edilirse sayı varsayılır.",extends:"Bir sınıfı veya arabirimi başka bir sınıftan miras alıyormuş gibi işaretler. @Extends ile işaretlenmiş bir sınıf ayrıca @constructor, @interface veya @record ile işaretlenmelidir.",implements:"Bir sınıfın bir arabirim uyguladığını belirtmek için @constructor ile birlikte kullanılır.",interface:"Bir işlevi arayüz olarak işaretler. Bir arabirim, bir türün gerekli üyelerini belirtir. Bir arabirim uygulayan herhangi bir sınıf, arabirimin prototipinde tanımlanan tüm yöntemleri ve özellikleri uygulamalıdır. @İmplements'e bakın.",lends:"Bir nesne değişmezinin anahtarlarının başka bir nesnenin özellikleri olarak ele alınması gerektiğini belirtir. Bu açıklama yalnızca nesne değişmezlerinde görünmelidir.",param:"İşlev bağımsız değişkenlerinin türlerini belirtmek için yöntem, işlev ve yapıcı tanımlarıyla birlikte kullanılır.",return:"Yöntemin ve işlev tanımlarının dönüş türlerini belirtir. @Return etiketinin ardından bir tür ifadesi gelmelidir.",template:"Bkz. Genel Türler.",this:"Bunun bir işlev içinde başvurduğu nesnenin türünü belirtir. @This etiketinin ardından bir tür ifadesi gelmelidir.",type:"Bir değişkenin, özelliğin veya ifadenin türünü tanımlar. @Type etiketinin ardından bir tür ifadesi gelmelidir. İkinci örnekte olduğu gibi, tür ek açıklamasını satır içinde yazabilir ve @type'ı atlayabilirsiniz.",typedef:"Karmaşık türler (birleşimler ve kayıt türleri dahil) bir typedef kullanılarak kolaylık ve sürdürülebilirlik için takma ad olabilir. Bu ek açıklamalar uzun olabilir, ancak okunabilirlik için birden çok satıra bölünebilir.",deprecated:"İşaretli işlev, yöntem veya özelliğin kullanılmaması konusunda uyarır. Kullanımdan kaldırılmış bir yöntemi kullanmak bir derleyici uyarısı oluşturur.",final:"Bir sınıfta, bu sınıfın uzatılmasına izin verilmediğini gösterir. Bir yöntemde, hiçbir alt sınıfın bu yöntemi geçersiz kılmasına izin verilmediğini gösterir.",package:"Bir üyeyi veya mülkü özel paket olarak işaretler. Yalnızca aynı dizindeki kod @package olarak işaretlenmiş adlara erişebilir. Özellikle, üst ve alt dizinlerdeki kod, @package ile işaretlenmiş adlara erişemez.",public:"Bir üye veya mülkün halka açık olduğunu gösterir. @Public olarak işaretlenmiş bir özelliğe herhangi bir dosyadaki tüm kodlar erişebilir. Bu örtük varsayılandır ve nadiren kullanılır. Bu, adın karmaşık yapılarda korunması gerektiğini belirtmek için kullanılmaz, bkz. @ Dışa aktar.",private:"Bir üyeyi özel olarak işaretler. Yalnızca aynı dosyadaki kod genel değişkenlere ve @ özel olarak işaretlenmiş işlevlere erişebilir. @Private işaretli oluşturucular yalnızca aynı dosyadaki kodlar ve statik ve örnek üyeleri tarafından başlatılabilir.",protected:"Bir üye veya mülkün korunduğunu gösterir. @Protected işaretli bir mülke şu kişiler erişebilir:",const:"Bir değişkeni salt okunur olarak işaretler. Derleyici, JavaScript kodunu optimize eden @const değişkenlerini satır içi yapabilir.",dict:"@dict, değişken sayıda özelliğe sahip nesneler oluşturmak için kullanılır. Bir yapıcı (örnekte Foo) @dict ile açıklandığında, Foo nesnelerinin özelliklerine erişmek için yalnızca köşeli parantez gösterimini kullanabilirsiniz. Ek açıklama, doğrudan nesne değişmezleri üzerinde de kullanılabilir.",implicitCast:"Bu açıklama yalnızca externs özellik bildirimlerinde görünebilir. Özelliğin bildirilmiş bir türü vardır, ancak herhangi bir türü herhangi bir uyarı olmadan ona atayabilirsiniz. Özelliğe erişirken, bildirilen türün bir değerini geri alırsınız. Örneğin, element.innerHTML herhangi bir türe atanabilir, ancak her zaman bir dize döndürür.",inheritDoc:"Bir alt sınıfın bir yönteminin veya özelliğinin kasıtlı olarak üst sınıfın bir yöntemini veya özelliğini gizlediğini ve tam olarak aynı belgelere sahip olduğunu gösterir. @İnheritDoc etiketinin @override etiketini ifade ettiğine dikkat edin, @override tercih edilir.",override:"Bir yöntemin veya özelliğin, sınıf tarafından uygulanan bir arabirimin parçası olduğunu veya kasıtlı olarak üst sınıfın bir yöntemini veya özelliğini gizlediğini gösterir. Başka ek açıklama dahil edilmemişse, yöntem veya özellik ek açıklamaları otomatik olarak üst sınıfından devralır.",polymer:"Bir sınıfın Polimer semantiği olduğunu gösterir. Yalnızca --polymer_pass = 2 bayrağı belirtildiğinde derleyiciyi etkiler. Polymer Pass'ın Polimer sınıflarını tanımasına ve uygun tür bilgilerini eklemesine izin verir.",polymerBehavior:"Global bir nesnenin Polimer davranışı olarak kullanılabileceğini gösterir. Polymer Pass'ın davranışları tanımasına ve Polimer tanımını kullanarak tür bilgilerini kopyalamasına izin verir. Davranış nesneleri global olmalıdır.",struct:"@struct, sabit sayıda özelliğe sahip nesneler oluşturmak için kullanılır. Bir yapıcı (örnekte Foo) @struct ile açıklama eklendiğinde, köşeli parantez notasyonuna değil, Foo nesnelerinin özelliklerine erişmek için yalnızca nokta notasyonunu kullanabilirsiniz. Ayrıca, oluşturulduktan sonra bir Foo örneğine bir özellik ekleyemezsiniz. Ek açıklama, doğrudan nesne değişmezleri üzerinde de kullanılabilir.",suppress:"Uyarıları bastırır. Uyarı kategorileri | ile ayrılır. veya,. Uyarı adlarının bir listesi için Uyarılar'a bakın.",unrestricted:"Bir sınıfın ne @ yapı türü ne de @dict türü olduğunu belirtir. Bu, @constructor işleviyle oluşturulan eski Closure stili sınıflar için varsayılandır. Hem goog.defineClass hem de ES class anahtar sözcüğü, varsayılan olarak @struct olan sınıflar üretir, bu nedenle @unrestricted olarak açıkça etiketlenmesi gerekir.",define:"Derleyici tarafından derleme zamanında geçersiz kılınabilecek bir sabiti gösterir. Soldaki örnekle, ENABLE_DEBUG değerini false olarak değiştirmek için derleyiciye --define = 'ENABLE_DEBUG = false' bayrağını iletebilirsiniz. Tanımlanmış bir sabitin türü sayı, dize veya boole olabilir. Tanımlara yalnızca genel kapsamda izin verilir.",export:"Özellikler @export ile işaretlendiğinde ve derleyici --generate_exports bayrağıyla çalıştırıldığında, karşılık gelen bir goog.exportSymbol ifadesi oluşturulur:",externs:"Bir externs dosyası bildirir.",fileoverview:"Yorum bloğunun gizlemeler dahil dosya düzeyinde bilgi sağlamasını sağlar.",license:"Derleyiciye, işaretlenen dosya için derlenmiş kodun önüne ilişkili yorumu eklemesini söyler. Bu ek açıklama, önemli bildirimlerin (yasal lisanslar veya telif hakkı metni gibi) derlemede değişmeden hayatta kalmasını sağlar. Satır sonları korunur.",noalias:'Derleyiciye, değişkenin veya işlevin, derleyicinin \\"harici takma ad\\" geçişinin bir parçası olarak takma ad verilmemesi gerektiğini belirtmek için bir externs dosyasında kullanılır, varsayılan olarak etkinleştirilmez ve yalnızca Java API\'si aracılığıyla kullanılabilir.',nocompile:"Bir dosyanın en üstünde, derleyiciye bu dosyayı ayrıştırmasını ancak derlememesini söylemek için kullanılır. Derleme amaçlı olmayan ve derleme testlerinden çıkarılması gereken kod (önyükleme kodu gibi) bu açıklamayı kullanır. Çoğu kod, davranışı değiştirmek için @define gibi başka araçlar kullanmalıdır.",nocollapse:"Derleyici tarafından bir değişkene daraltılmaması gereken bir özelliği belirtir. @Nocollapse için birincil kullanım, değiştirilebilir özelliklerin dışa aktarılmasına izin vermektir. Daraltılmamış özelliklerin yine de derleyici tarafından yeniden adlandırılabileceğini unutmayın. @Nocollapse ile bir nesne olan bir özelliğe açıklama eklerseniz, tüm özellikleri de birleştirilmemiş olarak kalacaktır.",noinline:"(DENEYSEL) Optimizasyonlarla satır içine alınmaması gereken bir işlevi veya değişkeni belirtir.",nosideeffects:'@nosideeffects, bildirilen işleve yapılan bir çağrının hiçbir yan etkisi olmadığını belirtir. Bu açıklama, geri dönüş değeri kullanılmazsa derleyicinin işleve yönelik çağrıları kaldırmasına izin verir. Bu, fonksiyonun \\"saf\\" olduğuna dair bir işaret değildir: yine de değişken global durumu okuyabilir.',throws:"Bir işlev tarafından atılan istisnaları belgelemek için kullanılır. Tür denetleyicisi şu anda bu bilgiyi kullanmamaktadır. Yalnızca bir externs dosyasında bildirilen bir işlevin yan etkileri olup olmadığını anlamak için kullanılır.",abstract:"@Abstract JsDoc'u desteklemek ve bunu soyut sınıfların ve yöntemlerin anlamsallığı üzerinde derleme zamanı kontrollerine yardımcı olmak için kullanmak, Closure Compiler'a uzun süredir bir özellik isteğiydi. Bu özellik, TypeScript gibi isteğe bağlı diğer JavaScript tür sistemlerinde de mevcuttur. Closure Compiler, 2016 yılında tür sistemi düzeyinde sınıflar ve yöntemler üzerinde @abstract desteği ekledi. Yeni JavaScript kodu için, goog.abstractMethod lehine @abstract JsDoc kullanılmalıdır."},inlineDocs:{}},"zh-cn":{blockDocs:{constructor:"将函数标记为构造函数。对于与new关键字一起使用的任何功能，编译器均需要@constructor批注。 EcmaScript类的构造方法和goog.defineClass的构造方法应省略@constructor。",enum:"指定一个枚举，该枚举是一种类型，具有特定数量的可能值，通常是字符串或数字。 @enum标记后必须跟一个类型表达式。如果省略枚举的类型，则假定为数字。",extends:"将一个类或接口标记为从另一个类继承。标有@extends的类也必须标有@ constructor，@ interface或@record。",implements:"与@constructor一起使用以指示类实现了接口。",interface:"将功能标记为接口。接口指定类型的必需成员。任何实现接口的类都必须实现接口原型上定义的所有方法和属性。请参阅@implements。",lends:"指示对象文字的键应视为其他对象的属性。此注释应仅出现在对象文字上。",param:"与方法，函数和构造函数定义一起使用以指定函数参数的类型。",return:"指定方法和函数定义的返回类型。 @return标记后必须跟随一个类型表达式。",template:"请参见通用类型。",this:"指定此对象在函数中所引用的对象的类型。 @this标记后必须带有类型表达式。",type:"标识变量，属性或表达式的类型。 @type标记后必须跟一个类型表达式。您也可以内联编写类型注释，并省略@type，如第二个示例所示。",typedef:"复杂类型（包括联合和记录类型）可以使用typedef为方便和可维护性使用别名。这些注释可能很长，但是为了便于阅读，可以分为多行。",deprecated:"警告不要使用标记的函数，方法或属性。使用不推荐使用的方法将产生编译器警告。",final:"在一个类上，指示不允许扩展该类。在方法上，指示不允许任何子类覆盖该方法。",package:"将成员或属性标记为包私有。只有同一目录中的代码才能访问标有@package的名称。特别是，父目录和子目录中的代码无法访问标记为@package的名称。",public:"表示成员或属性是公共的。标记为@public的属性可用于任何文件中的所有代码。这是隐式默认值，很少使用。这并不表示在混淆版本时应保留名称，请参见@export。",private:"将成员标记为私人。只有同一文件中的代码才能访问标记为@private的全局变量和函数。标记为@private的构造函数只能由同一文件中的代码及其静态和实例成员实例化。",protected:"表示成员或属性受到保护。标记为@protected的属性可用于：",const:"将变量标记为只读。编译器可以内联@const变量，从而优化JavaScript代码。",dict:"@dict用于创建具有可变数量属性的对象。用@dict注释构造函数（示例中为Foo）时，只能使用方括号表示法访问Foo对象的属性。注释也可以直接用于对象文字。",implicitCast:"该注释只能出现在externs属性声明中。该属性具有声明的类型，但是您可以在没有警告的情况下为其分配任何类型。访问该属性时，您将获得一个声明类型的值。例如，可以为element.innerHTML分配任何类型，但始终返回一个字符串。",inheritDoc:"指示子类的方法或属性有意隐藏超类的方法或属性，并且具有完全相同的文档。请注意，@inheritDoc标记暗含@override标记，首选@override。",override:"指示方法或属性是该类实现的接口的一部分，或有意隐藏了超类的方法或属性。如果不包括其他注释，则该方法或属性会自动从其超类继承注释。",polymer:"指示类具有Polymer语义。仅在指定--polymer_pass = 2标志时影响编译器。允许Polymer Pass识别Polymer类并添加适当的类型信息。",polymerBehavior:"指示全局对象可用作聚合物行为。允许Polymer Pass识别行为并将类型信息复制到正在使用的Polymer定义中。行为对象必须是全局的。",struct:"@struct用于创建具有固定数量属性的对象。用@struct注释构造函数（在示例中为Foo）时，只能使用点表示法访问Foo对象的属性，而不能使用方括号表示法。同样，在构造Foo实例后，您无法将其添加到Foo实例中。注释也可以直接用于对象文字。",suppress:"禁止显示警告。警告类别以|分隔。要么 ，。有关警告名称的列表，请查看警告。",unrestricted:"指示类既不是@struct类型也不是@dict类型。这是使用@constructor函数创建的旧Closure样式类的默认设置。 goog.defineClass和ES class关键字都产生默认情况下为@struct的类，因此需要显式标记为@unrestricted。",define:"指示可以在编译时被编译器覆盖的常量。在左侧的示例中，可以将标志--define ='ENABLE_DEBUG = false'传递给编译器，以将ENABLE_DEBUG的值更改为false。 定义的常量的类型可以是数字，字符串或布尔值。仅在全局范围内允许定义。",export:"使用@export标记属性并使用--generate_exports标志运行编译器时，将生成相应的goog.exportSymbol语句：",externs:"声明一个externs文件。",fileoverview:"使注释块提供文件级别信息，包括禁止。",license:"告诉编译器在标记文件的已编译代码之前插入关联的注释。该批注允许重要的声明（例如法律许可或版权文本）在未更改的情况下得以生存。换行符被保留。",noalias:"在externs文件中使用，以指示编译器变量或函数不应作为编译器“别名外部”传递的一部分进行别名，默认情况下未启用，并且仅可通过Java API使用。",nocompile:"在文件顶部使用，用于告诉编译器解析此文件但不对其进行编译。并非用于编译的代码，应在编译测试中省略的代码（例如引导程序代码）使用此注释。大多数代码应使用@define等其他方式来更改行为。",nocollapse:"表示不应由编译器折叠为变量的属性。 @nocollapse的主要用途是允许导出可变属性。请注意，未折叠的属性仍可以由编译器重命名。如果使用@nocollapse注释作为对象的属性，则其所有属性也将保持未折叠状态。",noinline:"（EXPERIMENTAL）表示优化不应该内联的函数或变量。",nosideeffects:"@nosideeffects表示对已声明函数的调用没有副作用。如果未使用返回值，则此批注允许编译器删除对函数的调用。这并不表示该函数是“纯”函数：它可能仍读取可变的全局状态。",throws:"用于记录函数抛出的异常。类型检查器当前不使用此信息。它仅用于确定externs文件中声明的函数是否有副作用。",abstract:"长期以来，支持@abstract JsDoc并使用它来帮助对抽象类和方法的语义进行编译时检查是一项对Closure Compiler的功能要求。其他一些JavaScript可选类型系统（例如TypeScript）中也存在此功能。 Closure Compiler在2016年增加了对类型系统级别的类和方法使用@abstract的支持。对于新的JavaScript代码，应使用@abstract JsDoc来支持goog.abstractMethod。"},inlineDocs:{}},"zh-tw":{blockDocs:{constructor:"將函數標記為構造函數。對於與new關鍵字一起使用的任何功能，編譯器均需要@constructor批註。 EcmaScript類的構造方法和goog.defineClass的構造方法應省略@constructor。",enum:"指定一個枚舉，該枚舉是一種類型，具有特定數量的可能值，通常是字符串或數字。 @enum標記後必須跟一個類型表達式。如果省略枚舉的類型，則假定為數字。",extends:"將一個類或接口標記為從另一個類繼承。標有@extends的類也必須標有@ constructor，@ interface或@record。",implements:"與@constructor一起使用以指示類實現了接口。",interface:"將功能標記為接口。接口指定類型的必需成員。任何實現接口的類都必須實現接口原型上定義的所有方法和屬性。請參閱@implements。",lends:"指示對象文字的鍵應視為其他對象的屬性。此註釋應僅出現在對象文字上。",param:"與方法，函數和構造函數定義一起使用以指定函數參數的類型。",return:"指定方法和函數定義的返回類型。 @return標記後必須跟隨一個類型表達式。",template:"請參見通用類型。",this:"指定此對像在函數中所引用的對象的類型。 @this標記後必須帶有類型表達式。",type:"標識變量，屬性或表達式的類型。 @type標記後必須跟一個類型表達式。您也可以內聯編寫類型註釋，並省略@type，如第二個示例所示。",typedef:"複雜類型（包括聯合和記錄類型）可以使用typedef為方便和可維護性使用別名。這些註釋可能很長，但是為了便於閱讀，可以分為多行。",deprecated:"警告不要使用標記的函數，方法或屬性。使用不推薦使用的方法將產生編譯器警告。",final:"在一個類上，指示不允許擴展該類。在方法上，指示不允許任何子類覆蓋該方法。",package:"將成員或屬性標記為包私有。只有同一目錄中的代碼才能訪問標有@package的名稱。特別是，父目錄和子目錄中的代碼無法訪問標記為@package的名稱。",public:"表示成員或屬性是公共的。標記為@public的屬性可用於任何文件中的所有代碼。這是隱式默認值，很少使用。這並不表示在混淆版本時應保留名稱，請參見@export。",private:"將成員標記為私人。只有同一文件中的代碼才能訪問標記為@private的全局變量和函數。標記為@private的構造函數只能由同一文件中的代碼及其靜態和實例成員實例化。",protected:"表示成員或屬性受到保護。標記為@protected的屬性可用於：",const:"將變量標記為只讀。編譯器可以內聯@const變量，從而優化JavaScript代碼。",dict:"@dict用於創建具有可變數量屬性的對象。用@dict註釋構造函數（示例中為Foo）時，只能使用方括號表示法訪問Foo對象的屬性。註釋也可以直接用於對象文字。",implicitCast:"該註釋只能出現在externs屬性聲明中。該屬性具有聲明的類型，但是您可以在沒有警告的情況下為其分配任何類型。訪問該屬性時，您將獲得一個聲明類型的值。例如，可以為element.innerHTML分配任何類型，但始終返回一個字符串。",inheritDoc:"指示子類的方法或屬性有意隱藏超類的方法或屬性，並且具有完全相同的文檔。請注意，@inheritDoc標記暗含@override標記，首選@override。",override:"指示方法或屬性是該類實現的接口的一部分，或有意隱藏了超類的方法或屬性。如果不包括其他註釋，則該方法或屬性會自動從其超類繼承註釋。",polymer:"指示類具有Polymer語義。僅在指定--polymer_pass = 2標誌時影響編譯器。允許Polymer Pass識別Polymer類並添加適當的類型信息。",polymerBehavior:"指示全局對象可用作聚合物行為。允許Polymer Pass識別行為並將類型信息複製到正在使用的Polymer定義中。行為對象必須是全局的。",struct:"@struct用於創建具有固定數量屬性的對象。用@struct註釋構造函數（在示例中為Foo）時，只能使用點表示法訪問Foo對象的屬性，而不能使用方括號表示法。同樣，在構造Foo實例後，您無法將其添加到Foo實例中。註釋也可以直接用於對象文字。",suppress:"禁止顯示警告。警告類別以|分隔。要么 ，。有關警告名稱的列表，請查看警告。",unrestricted:"指示類既不是@struct類型也不是@dict類型。這是使用@constructor函數創建的舊Closure樣式類的默認設置。 goog.defineClass和ES class關鍵字都產生默認情況下為@struct的類，因此需要顯式標記為@unrestricted。",define:"指示可以在編譯時被編譯器覆蓋的常量。在左側的示例中，可以將標誌--define ='ENABLE_DEBUG = false'傳遞給編譯器，以將ENABLE_DEBUG的值更改為false。 定義的常量的類型可以是數字，字符串或布爾值。僅在全局範圍內允許定義。",export:"使用@export標記屬性並使用--generate_exports標誌運行編譯器時，將生成相應的goog.exportSymbol語句：",externs:"聲明一個externs文件。",fileoverview:"使註釋塊提供文件級別信息，包括禁止。",license:"告訴編譯器在標記文件的已編譯代碼之前插入關聯的註釋。該批註允許重要的聲明（例如法律許可或版權文本）在未更改的情況下倖免於難。換行符被保留。",noalias:"在externs文件中使用，以指示編譯器變量或函數不應作為編譯器“別名外部”傳遞的一部分進行別名，默認情況下未啟用，並且僅可通過Java API使用。",nocompile:"在文件頂部使用，用於告訴編譯器解析此文件但不對其進行編譯。並非用於編譯的代碼，應在編譯測試中省略的代碼（例如引導程序代碼）使用此註釋。大多數代碼應使用@define等其他方式來更改行為。",nocollapse:"表示不應由編譯器折疊為變量的屬性。 @nocollapse的主要用途是允許導出可變屬性。請注意，未折疊的屬性仍可以由編譯器重命名。如果使用@nocollapse註釋作為對象的屬性，則其所有屬性也將保持未折疊狀態。",noinline:"（EXPERIMENTAL）表示優化不應該內聯的函數或變量。",nosideeffects:"@nosideeffects表示對已聲明函數的調用沒有副作用。如果未使用返回值，則此批註允許編譯器刪除對函數的調用。這並不表示該函數是“純”函數：它可能仍讀取可變的全局狀態。",throws:"用於記錄函數拋出的異常。類型檢查器當前不使用此信息。它僅用於確定externs文件中聲明的函數是否有副作用。",abstract:"長期以來，支持@abstract JsDoc並使用它來幫助對抽像類和方法的語義進行編譯時檢查是一項對Closure Compiler的功能要求。其他一些JavaScript可選類型系統（例如TypeScript）中也存在此功能。 Closure Compiler在2016年增加了對類型系統級別的類和方法使用@abstract的支持。對於新的JavaScript代碼，應使用@abstract JsDoc來支持goog.abstractMethod。"},inlineDocs:{}}}},597:e=>{"use strict";e.exports=require("../../di")}},a={};return function o(i){if(a[i])return a[i].exports;var n=a[i]={exports:{}};return e[i](n,n.exports,o),n.exports}(231)})();